{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ca0aa19e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:09:36.441399Z",
     "iopub.status.busy": "2024-09-10T17:09:36.440901Z",
     "iopub.status.idle": "2024-09-10T17:09:38.666745Z",
     "shell.execute_reply": "2024-09-10T17:09:38.665633Z"
    },
    "papermill": {
     "duration": 2.248403,
     "end_time": "2024-09-10T17:09:38.669354",
     "exception": false,
     "start_time": "2024-09-10T17:09:36.420951",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "pd.options.display.max_columns=None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3c7662c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:09:38.707239Z",
     "iopub.status.busy": "2024-09-10T17:09:38.705987Z",
     "iopub.status.idle": "2024-09-10T17:09:41.431176Z",
     "shell.execute_reply": "2024-09-10T17:09:41.430091Z"
    },
    "papermill": {
     "duration": 2.747173,
     "end_time": "2024-09-10T17:09:41.434628",
     "exception": false,
     "start_time": "2024-09-10T17:09:38.687455",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Invoice</th>\n",
       "      <th>StockCode</th>\n",
       "      <th>Description</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>InvoiceDate</th>\n",
       "      <th>Price</th>\n",
       "      <th>Customer ID</th>\n",
       "      <th>Country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>489434</td>\n",
       "      <td>85048</td>\n",
       "      <td>15CM CHRISTMAS GLASS BALL 20 LIGHTS</td>\n",
       "      <td>12</td>\n",
       "      <td>2009-12-01 07:45:00</td>\n",
       "      <td>6.95</td>\n",
       "      <td>13085.0</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>489434</td>\n",
       "      <td>79323P</td>\n",
       "      <td>PINK CHERRY LIGHTS</td>\n",
       "      <td>12</td>\n",
       "      <td>2009-12-01 07:45:00</td>\n",
       "      <td>6.75</td>\n",
       "      <td>13085.0</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>489434</td>\n",
       "      <td>79323W</td>\n",
       "      <td>WHITE CHERRY LIGHTS</td>\n",
       "      <td>12</td>\n",
       "      <td>2009-12-01 07:45:00</td>\n",
       "      <td>6.75</td>\n",
       "      <td>13085.0</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>489434</td>\n",
       "      <td>22041</td>\n",
       "      <td>RECORD FRAME 7\" SINGLE SIZE</td>\n",
       "      <td>48</td>\n",
       "      <td>2009-12-01 07:45:00</td>\n",
       "      <td>2.10</td>\n",
       "      <td>13085.0</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>489434</td>\n",
       "      <td>21232</td>\n",
       "      <td>STRAWBERRY CERAMIC TRINKET BOX</td>\n",
       "      <td>24</td>\n",
       "      <td>2009-12-01 07:45:00</td>\n",
       "      <td>1.25</td>\n",
       "      <td>13085.0</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1067366</th>\n",
       "      <td>581587</td>\n",
       "      <td>22899</td>\n",
       "      <td>CHILDREN'S APRON DOLLY GIRL</td>\n",
       "      <td>6</td>\n",
       "      <td>2011-12-09 12:50:00</td>\n",
       "      <td>2.10</td>\n",
       "      <td>12680.0</td>\n",
       "      <td>France</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1067367</th>\n",
       "      <td>581587</td>\n",
       "      <td>23254</td>\n",
       "      <td>CHILDRENS CUTLERY DOLLY GIRL</td>\n",
       "      <td>4</td>\n",
       "      <td>2011-12-09 12:50:00</td>\n",
       "      <td>4.15</td>\n",
       "      <td>12680.0</td>\n",
       "      <td>France</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1067368</th>\n",
       "      <td>581587</td>\n",
       "      <td>23255</td>\n",
       "      <td>CHILDRENS CUTLERY CIRCUS PARADE</td>\n",
       "      <td>4</td>\n",
       "      <td>2011-12-09 12:50:00</td>\n",
       "      <td>4.15</td>\n",
       "      <td>12680.0</td>\n",
       "      <td>France</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1067369</th>\n",
       "      <td>581587</td>\n",
       "      <td>22138</td>\n",
       "      <td>BAKING SET 9 PIECE RETROSPOT</td>\n",
       "      <td>3</td>\n",
       "      <td>2011-12-09 12:50:00</td>\n",
       "      <td>4.95</td>\n",
       "      <td>12680.0</td>\n",
       "      <td>France</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1067370</th>\n",
       "      <td>581587</td>\n",
       "      <td>POST</td>\n",
       "      <td>POSTAGE</td>\n",
       "      <td>1</td>\n",
       "      <td>2011-12-09 12:50:00</td>\n",
       "      <td>18.00</td>\n",
       "      <td>12680.0</td>\n",
       "      <td>France</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1067371 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Invoice StockCode                          Description  Quantity  \\\n",
       "0        489434     85048  15CM CHRISTMAS GLASS BALL 20 LIGHTS        12   \n",
       "1        489434    79323P                   PINK CHERRY LIGHTS        12   \n",
       "2        489434    79323W                  WHITE CHERRY LIGHTS        12   \n",
       "3        489434     22041         RECORD FRAME 7\" SINGLE SIZE         48   \n",
       "4        489434     21232       STRAWBERRY CERAMIC TRINKET BOX        24   \n",
       "...         ...       ...                                  ...       ...   \n",
       "1067366  581587     22899         CHILDREN'S APRON DOLLY GIRL          6   \n",
       "1067367  581587     23254        CHILDRENS CUTLERY DOLLY GIRL          4   \n",
       "1067368  581587     23255      CHILDRENS CUTLERY CIRCUS PARADE         4   \n",
       "1067369  581587     22138        BAKING SET 9 PIECE RETROSPOT          3   \n",
       "1067370  581587      POST                              POSTAGE         1   \n",
       "\n",
       "                 InvoiceDate  Price  Customer ID         Country  \n",
       "0        2009-12-01 07:45:00   6.95      13085.0  United Kingdom  \n",
       "1        2009-12-01 07:45:00   6.75      13085.0  United Kingdom  \n",
       "2        2009-12-01 07:45:00   6.75      13085.0  United Kingdom  \n",
       "3        2009-12-01 07:45:00   2.10      13085.0  United Kingdom  \n",
       "4        2009-12-01 07:45:00   1.25      13085.0  United Kingdom  \n",
       "...                      ...    ...          ...             ...  \n",
       "1067366  2011-12-09 12:50:00   2.10      12680.0          France  \n",
       "1067367  2011-12-09 12:50:00   4.15      12680.0          France  \n",
       "1067368  2011-12-09 12:50:00   4.15      12680.0          France  \n",
       "1067369  2011-12-09 12:50:00   4.95      12680.0          France  \n",
       "1067370  2011-12-09 12:50:00  18.00      12680.0          France  \n",
       "\n",
       "[1067371 rows x 8 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df=pd.read_csv(\"/kaggle/input/marketbasket/market_basket.csv\")\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "53f7c8ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:09:41.474289Z",
     "iopub.status.busy": "2024-09-10T17:09:41.473289Z",
     "iopub.status.idle": "2024-09-10T17:09:41.499225Z",
     "shell.execute_reply": "2024-09-10T17:09:41.498097Z"
    },
    "papermill": {
     "duration": 0.047368,
     "end_time": "2024-09-10T17:09:41.501450",
     "exception": false,
     "start_time": "2024-09-10T17:09:41.454082",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5943"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df[\"Customer ID\"].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "00961177",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:09:41.538764Z",
     "iopub.status.busy": "2024-09-10T17:09:41.538048Z",
     "iopub.status.idle": "2024-09-10T17:09:41.544511Z",
     "shell.execute_reply": "2024-09-10T17:09:41.543527Z"
    },
    "papermill": {
     "duration": 0.027381,
     "end_time": "2024-09-10T17:09:41.546501",
     "exception": false,
     "start_time": "2024-09-10T17:09:41.519120",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1067371, 8)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e45e9612",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:09:41.583754Z",
     "iopub.status.busy": "2024-09-10T17:09:41.583338Z",
     "iopub.status.idle": "2024-09-10T17:09:41.727208Z",
     "shell.execute_reply": "2024-09-10T17:09:41.726170Z"
    },
    "papermill": {
     "duration": 0.165179,
     "end_time": "2024-09-10T17:09:41.729556",
     "exception": false,
     "start_time": "2024-09-10T17:09:41.564377",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Quantity</th>\n",
       "      <th>Price</th>\n",
       "      <th>Customer ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.067371e+06</td>\n",
       "      <td>1.067371e+06</td>\n",
       "      <td>824364.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>9.938898e+00</td>\n",
       "      <td>4.649388e+00</td>\n",
       "      <td>15324.638504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.727058e+02</td>\n",
       "      <td>1.235531e+02</td>\n",
       "      <td>1697.464450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-8.099500e+04</td>\n",
       "      <td>-5.359436e+04</td>\n",
       "      <td>12346.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.250000e+00</td>\n",
       "      <td>13975.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>2.100000e+00</td>\n",
       "      <td>15255.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000e+01</td>\n",
       "      <td>4.150000e+00</td>\n",
       "      <td>16797.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>8.099500e+04</td>\n",
       "      <td>3.897000e+04</td>\n",
       "      <td>18287.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Quantity         Price    Customer ID\n",
       "count  1.067371e+06  1.067371e+06  824364.000000\n",
       "mean   9.938898e+00  4.649388e+00   15324.638504\n",
       "std    1.727058e+02  1.235531e+02    1697.464450\n",
       "min   -8.099500e+04 -5.359436e+04   12346.000000\n",
       "25%    1.000000e+00  1.250000e+00   13975.000000\n",
       "50%    3.000000e+00  2.100000e+00   15255.000000\n",
       "75%    1.000000e+01  4.150000e+00   16797.000000\n",
       "max    8.099500e+04  3.897000e+04   18287.000000"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "68d41759",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:09:41.768118Z",
     "iopub.status.busy": "2024-09-10T17:09:41.767171Z",
     "iopub.status.idle": "2024-09-10T17:09:42.042810Z",
     "shell.execute_reply": "2024-09-10T17:09:42.041680Z"
    },
    "papermill": {
     "duration": 0.297526,
     "end_time": "2024-09-10T17:09:42.045245",
     "exception": false,
     "start_time": "2024-09-10T17:09:41.747719",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1067371 entries, 0 to 1067370\n",
      "Data columns (total 8 columns):\n",
      " #   Column       Non-Null Count    Dtype  \n",
      "---  ------       --------------    -----  \n",
      " 0   Invoice      1067371 non-null  object \n",
      " 1   StockCode    1067371 non-null  object \n",
      " 2   Description  1062989 non-null  object \n",
      " 3   Quantity     1067371 non-null  int64  \n",
      " 4   InvoiceDate  1067371 non-null  object \n",
      " 5   Price        1067371 non-null  float64\n",
      " 6   Customer ID  824364 non-null   float64\n",
      " 7   Country      1067371 non-null  object \n",
      "dtypes: float64(2), int64(1), object(5)\n",
      "memory usage: 65.1+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5e20dc29",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:09:42.083214Z",
     "iopub.status.busy": "2024-09-10T17:09:42.082785Z",
     "iopub.status.idle": "2024-09-10T17:09:42.226535Z",
     "shell.execute_reply": "2024-09-10T17:09:42.225319Z"
    },
    "papermill": {
     "duration": 0.165384,
     "end_time": "2024-09-10T17:09:42.228823",
     "exception": false,
     "start_time": "2024-09-10T17:09:42.063439",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Quantity</th>\n",
       "      <th>Price</th>\n",
       "      <th>Customer ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.067371e+06</td>\n",
       "      <td>1.067371e+06</td>\n",
       "      <td>824364.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>9.938898e+00</td>\n",
       "      <td>4.649388e+00</td>\n",
       "      <td>15324.638504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.727058e+02</td>\n",
       "      <td>1.235531e+02</td>\n",
       "      <td>1697.464450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-8.099500e+04</td>\n",
       "      <td>-5.359436e+04</td>\n",
       "      <td>12346.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.250000e+00</td>\n",
       "      <td>13975.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>2.100000e+00</td>\n",
       "      <td>15255.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000e+01</td>\n",
       "      <td>4.150000e+00</td>\n",
       "      <td>16797.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>8.099500e+04</td>\n",
       "      <td>3.897000e+04</td>\n",
       "      <td>18287.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Quantity         Price    Customer ID\n",
       "count  1.067371e+06  1.067371e+06  824364.000000\n",
       "mean   9.938898e+00  4.649388e+00   15324.638504\n",
       "std    1.727058e+02  1.235531e+02    1697.464450\n",
       "min   -8.099500e+04 -5.359436e+04   12346.000000\n",
       "25%    1.000000e+00  1.250000e+00   13975.000000\n",
       "50%    3.000000e+00  2.100000e+00   15255.000000\n",
       "75%    1.000000e+01  4.150000e+00   16797.000000\n",
       "max    8.099500e+04  3.897000e+04   18287.000000"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "56f8c9ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:09:42.267403Z",
     "iopub.status.busy": "2024-09-10T17:09:42.266940Z",
     "iopub.status.idle": "2024-09-10T17:09:42.539825Z",
     "shell.execute_reply": "2024-09-10T17:09:42.538784Z"
    },
    "papermill": {
     "duration": 0.294644,
     "end_time": "2024-09-10T17:09:42.542002",
     "exception": false,
     "start_time": "2024-09-10T17:09:42.247358",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Invoice             0\n",
       "StockCode           0\n",
       "Description      4382\n",
       "Quantity            0\n",
       "InvoiceDate         0\n",
       "Price               0\n",
       "Customer ID    243007\n",
       "Country             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "44eef773",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:09:42.581418Z",
     "iopub.status.busy": "2024-09-10T17:09:42.580629Z",
     "iopub.status.idle": "2024-09-10T17:09:42.842356Z",
     "shell.execute_reply": "2024-09-10T17:09:42.841336Z"
    },
    "papermill": {
     "duration": 0.283498,
     "end_time": "2024-09-10T17:09:42.844530",
     "exception": false,
     "start_time": "2024-09-10T17:09:42.561032",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Invoice             0\n",
       "StockCode           0\n",
       "Description      4382\n",
       "Quantity            0\n",
       "InvoiceDate         0\n",
       "Price               0\n",
       "Customer ID    243007\n",
       "Country             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "69634c53",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:09:42.883888Z",
     "iopub.status.busy": "2024-09-10T17:09:42.883011Z",
     "iopub.status.idle": "2024-09-10T17:09:43.671025Z",
     "shell.execute_reply": "2024-09-10T17:09:43.669993Z"
    },
    "papermill": {
     "duration": 0.810124,
     "end_time": "2024-09-10T17:09:43.673421",
     "exception": false,
     "start_time": "2024-09-10T17:09:42.863297",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "34335"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7f19ba04",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:09:43.712549Z",
     "iopub.status.busy": "2024-09-10T17:09:43.712005Z",
     "iopub.status.idle": "2024-09-10T17:09:43.719530Z",
     "shell.execute_reply": "2024-09-10T17:09:43.718386Z"
    },
    "papermill": {
     "duration": 0.02947,
     "end_time": "2024-09-10T17:09:43.721668",
     "exception": false,
     "start_time": "2024-09-10T17:09:43.692198",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage of null customers in the dataset:  22.77 %\n"
     ]
    }
   ],
   "source": [
    "#percentage of null customers\n",
    "Ncustomers = round(df['Customer ID'].isnull().sum() * 100 / len(df),2)\n",
    "print(\"Percentage of null customers in the dataset: \",Ncustomers,'%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8f8740c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:09:43.760698Z",
     "iopub.status.busy": "2024-09-10T17:09:43.760242Z",
     "iopub.status.idle": "2024-09-10T17:09:43.777209Z",
     "shell.execute_reply": "2024-09-10T17:09:43.776086Z"
    },
    "papermill": {
     "duration": 0.039039,
     "end_time": "2024-09-10T17:09:43.779507",
     "exception": false,
     "start_time": "2024-09-10T17:09:43.740468",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Invoice</th>\n",
       "      <th>StockCode</th>\n",
       "      <th>Description</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>InvoiceDate</th>\n",
       "      <th>Price</th>\n",
       "      <th>Customer ID</th>\n",
       "      <th>Country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>179403</th>\n",
       "      <td>A506401</td>\n",
       "      <td>B</td>\n",
       "      <td>Adjust bad debt</td>\n",
       "      <td>1</td>\n",
       "      <td>2010-04-29 13:36:00</td>\n",
       "      <td>-53594.36</td>\n",
       "      <td>NaN</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>276274</th>\n",
       "      <td>A516228</td>\n",
       "      <td>B</td>\n",
       "      <td>Adjust bad debt</td>\n",
       "      <td>1</td>\n",
       "      <td>2010-07-19 11:24:00</td>\n",
       "      <td>-44031.79</td>\n",
       "      <td>NaN</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>403472</th>\n",
       "      <td>A528059</td>\n",
       "      <td>B</td>\n",
       "      <td>Adjust bad debt</td>\n",
       "      <td>1</td>\n",
       "      <td>2010-10-20 12:04:00</td>\n",
       "      <td>-38925.87</td>\n",
       "      <td>NaN</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>825444</th>\n",
       "      <td>A563186</td>\n",
       "      <td>B</td>\n",
       "      <td>Adjust bad debt</td>\n",
       "      <td>1</td>\n",
       "      <td>2011-08-12 14:51:00</td>\n",
       "      <td>-11062.06</td>\n",
       "      <td>NaN</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>825445</th>\n",
       "      <td>A563187</td>\n",
       "      <td>B</td>\n",
       "      <td>Adjust bad debt</td>\n",
       "      <td>1</td>\n",
       "      <td>2011-08-12 14:52:00</td>\n",
       "      <td>-11062.06</td>\n",
       "      <td>NaN</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Invoice StockCode      Description  Quantity          InvoiceDate  \\\n",
       "179403  A506401         B  Adjust bad debt         1  2010-04-29 13:36:00   \n",
       "276274  A516228         B  Adjust bad debt         1  2010-07-19 11:24:00   \n",
       "403472  A528059         B  Adjust bad debt         1  2010-10-20 12:04:00   \n",
       "825444  A563186         B  Adjust bad debt         1  2011-08-12 14:51:00   \n",
       "825445  A563187         B  Adjust bad debt         1  2011-08-12 14:52:00   \n",
       "\n",
       "           Price  Customer ID         Country  \n",
       "179403 -53594.36          NaN  United Kingdom  \n",
       "276274 -44031.79          NaN  United Kingdom  \n",
       "403472 -38925.87          NaN  United Kingdom  \n",
       "825444 -11062.06          NaN  United Kingdom  \n",
       "825445 -11062.06          NaN  United Kingdom  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[(df['Price']<0)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "72cd0ffd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:09:43.819162Z",
     "iopub.status.busy": "2024-09-10T17:09:43.818403Z",
     "iopub.status.idle": "2024-09-10T17:09:45.078530Z",
     "shell.execute_reply": "2024-09-10T17:09:45.077430Z"
    },
    "papermill": {
     "duration": 1.28276,
     "end_time": "2024-09-10T17:09:45.081156",
     "exception": false,
     "start_time": "2024-09-10T17:09:43.798396",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.drop_duplicates(inplace=True)\n",
    "df.dropna(inplace=True)\n",
    "#df=df[df[\"Price\"]>=0]\n",
    "#df=df[df[\"Quantity\"]>0]\n",
    "#df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6796acc6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:09:45.121401Z",
     "iopub.status.busy": "2024-09-10T17:09:45.120638Z",
     "iopub.status.idle": "2024-09-10T17:09:45.166781Z",
     "shell.execute_reply": "2024-09-10T17:09:45.165567Z"
    },
    "papermill": {
     "duration": 0.069074,
     "end_time": "2024-09-10T17:09:45.169332",
     "exception": false,
     "start_time": "2024-09-10T17:09:45.100258",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df=df[df[\"Price\"]>=0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c65622e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:09:45.210157Z",
     "iopub.status.busy": "2024-09-10T17:09:45.209154Z",
     "iopub.status.idle": "2024-09-10T17:09:45.301339Z",
     "shell.execute_reply": "2024-09-10T17:09:45.300251Z"
    },
    "papermill": {
     "duration": 0.115031,
     "end_time": "2024-09-10T17:09:45.303873",
     "exception": false,
     "start_time": "2024-09-10T17:09:45.188842",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df=df[df[\"Quantity\"]>0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7ac049bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:09:45.343789Z",
     "iopub.status.busy": "2024-09-10T17:09:45.342801Z",
     "iopub.status.idle": "2024-09-10T17:09:45.435208Z",
     "shell.execute_reply": "2024-09-10T17:09:45.434071Z"
    },
    "papermill": {
     "duration": 0.114999,
     "end_time": "2024-09-10T17:09:45.437839",
     "exception": false,
     "start_time": "2024-09-10T17:09:45.322840",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Quantity</th>\n",
       "      <th>Price</th>\n",
       "      <th>Customer ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>779495.000000</td>\n",
       "      <td>779495.000000</td>\n",
       "      <td>779495.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>13.507085</td>\n",
       "      <td>3.218199</td>\n",
       "      <td>15320.262918</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>146.540284</td>\n",
       "      <td>29.674823</td>\n",
       "      <td>1695.722988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>12346.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.250000</td>\n",
       "      <td>13971.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>6.000000</td>\n",
       "      <td>1.950000</td>\n",
       "      <td>15246.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>12.000000</td>\n",
       "      <td>3.750000</td>\n",
       "      <td>16794.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>80995.000000</td>\n",
       "      <td>10953.500000</td>\n",
       "      <td>18287.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Quantity          Price    Customer ID\n",
       "count  779495.000000  779495.000000  779495.000000\n",
       "mean       13.507085       3.218199   15320.262918\n",
       "std       146.540284      29.674823    1695.722988\n",
       "min         1.000000       0.000000   12346.000000\n",
       "25%         2.000000       1.250000   13971.000000\n",
       "50%         6.000000       1.950000   15246.000000\n",
       "75%        12.000000       3.750000   16794.000000\n",
       "max     80995.000000   10953.500000   18287.000000"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f2160773",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:09:45.478113Z",
     "iopub.status.busy": "2024-09-10T17:09:45.477180Z",
     "iopub.status.idle": "2024-09-10T17:09:46.231831Z",
     "shell.execute_reply": "2024-09-10T17:09:46.230587Z"
    },
    "papermill": {
     "duration": 0.777555,
     "end_time": "2024-09-10T17:09:46.234457",
     "exception": false,
     "start_time": "2024-09-10T17:09:45.456902",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Dates'] = pd.to_datetime(df['InvoiceDate']).dt.date #Get the date\n",
    "df['Year'] = pd.to_datetime(df['InvoiceDate']).dt.year #Get the year\n",
    "df['Months'] = pd.to_datetime(df['InvoiceDate']).dt.month #Get the month\n",
    "df['Time_hour'] = pd.to_datetime(df['InvoiceDate']).dt.hour #Get the hour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1315c883",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:09:46.327299Z",
     "iopub.status.busy": "2024-09-10T17:09:46.326875Z",
     "iopub.status.idle": "2024-09-10T17:09:50.479057Z",
     "shell.execute_reply": "2024-09-10T17:09:50.478077Z"
    },
    "papermill": {
     "duration": 4.227631,
     "end_time": "2024-09-10T17:09:50.481619",
     "exception": false,
     "start_time": "2024-09-10T17:09:46.253988",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])\n",
    "df['year_month'] = df['InvoiceDate'].dt.strftime('%Y.%m') #Get the year-month\n",
    "df.insert(loc=13,column='day', value=(df.InvoiceDate.dt.dayofweek)+1) #Get the day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "907507fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:09:50.521854Z",
     "iopub.status.busy": "2024-09-10T17:09:50.521450Z",
     "iopub.status.idle": "2024-09-10T17:09:50.531525Z",
     "shell.execute_reply": "2024-09-10T17:09:50.530632Z"
    },
    "papermill": {
     "duration": 0.032508,
     "end_time": "2024-09-10T17:09:50.533655",
     "exception": false,
     "start_time": "2024-09-10T17:09:50.501147",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Total Amount Spent'] = df['Quantity']*df['Price']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "8d26415a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:09:50.573485Z",
     "iopub.status.busy": "2024-09-10T17:09:50.573036Z",
     "iopub.status.idle": "2024-09-10T17:09:51.030465Z",
     "shell.execute_reply": "2024-09-10T17:09:51.029328Z"
    },
    "papermill": {
     "duration": 0.480107,
     "end_time": "2024-09-10T17:09:51.032756",
     "exception": false,
     "start_time": "2024-09-10T17:09:50.552649",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Invoice</th>\n",
       "      <th>StockCode</th>\n",
       "      <th>Description</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>InvoiceDate</th>\n",
       "      <th>Price</th>\n",
       "      <th>Customer ID</th>\n",
       "      <th>Country</th>\n",
       "      <th>Dates</th>\n",
       "      <th>Year</th>\n",
       "      <th>Months</th>\n",
       "      <th>Time_hour</th>\n",
       "      <th>year_month</th>\n",
       "      <th>day</th>\n",
       "      <th>Total Amount Spent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>840206</th>\n",
       "      <td>564651</td>\n",
       "      <td>23270</td>\n",
       "      <td>SET OF 2 CERAMIC PAINTED HEARTS</td>\n",
       "      <td>96</td>\n",
       "      <td>2011-08-26 14:19:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14646.0</td>\n",
       "      <td>Netherlands</td>\n",
       "      <td>2011-08-26</td>\n",
       "      <td>2011</td>\n",
       "      <td>8</td>\n",
       "      <td>14</td>\n",
       "      <td>2011.08</td>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1027583</th>\n",
       "      <td>578841</td>\n",
       "      <td>84826</td>\n",
       "      <td>ASSTD DESIGN 3D PAPER STICKERS</td>\n",
       "      <td>12540</td>\n",
       "      <td>2011-11-25 15:57:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13256.0</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>2011-11-25</td>\n",
       "      <td>2011</td>\n",
       "      <td>11</td>\n",
       "      <td>15</td>\n",
       "      <td>2011.11</td>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18738</th>\n",
       "      <td>490961</td>\n",
       "      <td>22065</td>\n",
       "      <td>CHRISTMAS PUDDING TRINKET POT</td>\n",
       "      <td>1</td>\n",
       "      <td>2009-12-08 15:25:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14108.0</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>2009-12-08</td>\n",
       "      <td>2009</td>\n",
       "      <td>12</td>\n",
       "      <td>15</td>\n",
       "      <td>2009.12</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>471775</th>\n",
       "      <td>533822</td>\n",
       "      <td>22846</td>\n",
       "      <td>BREAD BIN DINER STYLE RED</td>\n",
       "      <td>1</td>\n",
       "      <td>2010-11-19 09:40:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12647.0</td>\n",
       "      <td>Germany</td>\n",
       "      <td>2010-11-19</td>\n",
       "      <td>2010</td>\n",
       "      <td>11</td>\n",
       "      <td>9</td>\n",
       "      <td>2010.11</td>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>840207</th>\n",
       "      <td>564651</td>\n",
       "      <td>23268</td>\n",
       "      <td>SET OF 2 CERAMIC CHRISTMAS REINDEER</td>\n",
       "      <td>192</td>\n",
       "      <td>2011-08-26 14:19:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14646.0</td>\n",
       "      <td>Netherlands</td>\n",
       "      <td>2011-08-26</td>\n",
       "      <td>2011</td>\n",
       "      <td>8</td>\n",
       "      <td>14</td>\n",
       "      <td>2011.08</td>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Invoice StockCode                          Description  Quantity  \\\n",
       "840206   564651     23270     SET OF 2 CERAMIC PAINTED HEARTS         96   \n",
       "1027583  578841     84826       ASSTD DESIGN 3D PAPER STICKERS     12540   \n",
       "18738    490961     22065       CHRISTMAS PUDDING TRINKET POT          1   \n",
       "471775   533822     22846           BREAD BIN DINER STYLE RED          1   \n",
       "840207   564651     23268  SET OF 2 CERAMIC CHRISTMAS REINDEER       192   \n",
       "\n",
       "                InvoiceDate  Price  Customer ID         Country       Dates  \\\n",
       "840206  2011-08-26 14:19:00    0.0      14646.0     Netherlands  2011-08-26   \n",
       "1027583 2011-11-25 15:57:00    0.0      13256.0  United Kingdom  2011-11-25   \n",
       "18738   2009-12-08 15:25:00    0.0      14108.0  United Kingdom  2009-12-08   \n",
       "471775  2010-11-19 09:40:00    0.0      12647.0         Germany  2010-11-19   \n",
       "840207  2011-08-26 14:19:00    0.0      14646.0     Netherlands  2011-08-26   \n",
       "\n",
       "         Year  Months  Time_hour year_month  day  Total Amount Spent  \n",
       "840206   2011       8         14    2011.08    5                 0.0  \n",
       "1027583  2011      11         15    2011.11    5                 0.0  \n",
       "18738    2009      12         15    2009.12    2                 0.0  \n",
       "471775   2010      11          9    2010.11    5                 0.0  \n",
       "840207   2011       8         14    2011.08    5                 0.0  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sort_values(by=\"Total Amount Spent\").head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b8570ae3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:09:51.074441Z",
     "iopub.status.busy": "2024-09-10T17:09:51.073993Z",
     "iopub.status.idle": "2024-09-10T17:09:51.330810Z",
     "shell.execute_reply": "2024-09-10T17:09:51.329732Z"
    },
    "papermill": {
     "duration": 0.279868,
     "end_time": "2024-09-10T17:09:51.333234",
     "exception": false,
     "start_time": "2024-09-10T17:09:51.053366",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])\n",
    "\n",
    "# Label purchase time\n",
    "def label_purchase_time(hour):\n",
    "    if 6 <= hour < 12:\n",
    "        return 'morning'\n",
    "    elif 12 <= hour < 18:\n",
    "        return 'afternoon'\n",
    "    else:\n",
    "        return 'evening'\n",
    "\n",
    "df['PurchaseTime'] = df['InvoiceDate'].dt.hour.apply(label_purchase_time)\n",
    "\n",
    "df['TotalAmountSpent'] = df['Quantity'] * df['Price']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2425dfc6",
   "metadata": {
    "papermill": {
     "duration": 0.019016,
     "end_time": "2024-09-10T17:09:51.371684",
     "exception": false,
     "start_time": "2024-09-10T17:09:51.352668",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We apply Isolation Forest algorithm for outlier analysis, which is a very effective method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "4d6264ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:09:51.412624Z",
     "iopub.status.busy": "2024-09-10T17:09:51.411646Z",
     "iopub.status.idle": "2024-09-10T17:10:31.708446Z",
     "shell.execute_reply": "2024-09-10T17:10:31.707212Z"
    },
    "papermill": {
     "duration": 40.339745,
     "end_time": "2024-09-10T17:10:31.730769",
     "exception": false,
     "start_time": "2024-09-10T17:09:51.391024",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Invoice StockCode                          Description  Quantity  \\\n",
      "126      489444      POST                              POSTAGE         1   \n",
      "173      489447      POST                              POSTAGE         1   \n",
      "217      489460     84598        BOYS ALPHABET IRON ON PATCHES       576   \n",
      "223      489460     84568      GIRLS ALPHABET IRON ON PATCHES        288   \n",
      "575      489523     84879        ASSORTED COLOUR BIRD ORNAMENT       800   \n",
      "...         ...       ...                                  ...       ...   \n",
      "1065532  581459     22197                       POPCORN HOLDER      1200   \n",
      "1065775  581476     22693   GROW A FLYTRAP OR SUNFLOWER IN TIN       192   \n",
      "1065803  581476     16008  SMALL FOLDING SCISSOR(POINTED EDGE)       240   \n",
      "1065882  581483     23843          PAPER CRAFT , LITTLE BIRDIE     80995   \n",
      "1067006  581501     22319    HAIRCLIPS FORTIES FABRIC ASSORTED       180   \n",
      "\n",
      "                InvoiceDate   Price  Customer ID         Country       Dates  \\\n",
      "126     2009-12-01 09:55:00  141.00      12636.0             USA  2009-12-01   \n",
      "173     2009-12-01 10:10:00  130.00      12362.0         Belgium  2009-12-01   \n",
      "217     2009-12-01 10:46:00    0.21      16167.0  United Kingdom  2009-12-01   \n",
      "223     2009-12-01 10:46:00    0.21      16167.0  United Kingdom  2009-12-01   \n",
      "575     2009-12-01 11:46:00    1.45      12931.0  United Kingdom  2009-12-01   \n",
      "...                     ...     ...          ...             ...         ...   \n",
      "1065532 2011-12-08 18:46:00    0.72      17949.0  United Kingdom  2011-12-08   \n",
      "1065775 2011-12-09 08:48:00    1.06      12433.0          Norway  2011-12-09   \n",
      "1065803 2011-12-09 08:48:00    0.12      12433.0          Norway  2011-12-09   \n",
      "1065882 2011-12-09 09:15:00    2.08      16446.0  United Kingdom  2011-12-09   \n",
      "1067006 2011-12-09 10:46:00    0.19      12985.0  United Kingdom  2011-12-09   \n",
      "\n",
      "         Year  Months  Time_hour year_month  day  Total Amount Spent  \\\n",
      "126      2009      12          9    2009.12    2              141.00   \n",
      "173      2009      12         10    2009.12    2              130.00   \n",
      "217      2009      12         10    2009.12    2              120.96   \n",
      "223      2009      12         10    2009.12    2               60.48   \n",
      "575      2009      12         11    2009.12    2             1160.00   \n",
      "...       ...     ...        ...        ...  ...                 ...   \n",
      "1065532  2011      12         18    2011.12    4              864.00   \n",
      "1065775  2011      12          8    2011.12    5              203.52   \n",
      "1065803  2011      12          8    2011.12    5               28.80   \n",
      "1065882  2011      12          9    2011.12    5           168469.60   \n",
      "1067006  2011      12         10    2011.12    5               34.20   \n",
      "\n",
      "        PurchaseTime  TotalAmountSpent Outlier  \n",
      "126          morning            141.00     Yes  \n",
      "173          morning            130.00     Yes  \n",
      "217          morning            120.96     Yes  \n",
      "223          morning             60.48     Yes  \n",
      "575          morning           1160.00     Yes  \n",
      "...              ...               ...     ...  \n",
      "1065532      evening            864.00     Yes  \n",
      "1065775      morning            203.52     Yes  \n",
      "1065803      morning             28.80     Yes  \n",
      "1065882      morning         168469.60     Yes  \n",
      "1067006      morning             34.20     Yes  \n",
      "\n",
      "[7787 rows x 18 columns]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.ensemble import IsolationForest\n",
    "\n",
    "# Convert data types\n",
    "df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])  # Convert InvoiceDate to datetime\n",
    "\n",
    "# We use 'Quantity' and 'Price' for the outlier detection\n",
    "X = df[['Quantity', 'Price']]\n",
    "\n",
    "# Initialize Isolation Forest\n",
    "iso_forest = IsolationForest(n_estimators=100, contamination=0.01, random_state=42)\n",
    "\n",
    "# Fit the model\n",
    "iso_forest.fit(X)\n",
    "\n",
    "# Predictions\n",
    "outliers = iso_forest.predict(X)\n",
    "\n",
    "# Add a column to the original DataFrame to store the status of each data point\n",
    "df['Outlier'] = outliers\n",
    "df['Outlier'] = df['Outlier'].apply(lambda x: 'Yes' if x == -1 else 'No')\n",
    "\n",
    "# You can now filter out outliers or handle them in a way that suits your analysis\n",
    "outliers_df = df[df['Outlier'] == 'Yes']\n",
    "print(outliers_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "9ee00060",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:10:31.771452Z",
     "iopub.status.busy": "2024-09-10T17:10:31.770995Z",
     "iopub.status.idle": "2024-09-10T17:10:32.391301Z",
     "shell.execute_reply": "2024-09-10T17:10:32.390169Z"
    },
    "papermill": {
     "duration": 0.643609,
     "end_time": "2024-09-10T17:10:32.393813",
     "exception": false,
     "start_time": "2024-09-10T17:10:31.750204",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df=df[df[\"Outlier\"]==\"No\"].reset_index()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "c1101ddf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:10:32.434775Z",
     "iopub.status.busy": "2024-09-10T17:10:32.433971Z",
     "iopub.status.idle": "2024-09-10T17:10:32.529385Z",
     "shell.execute_reply": "2024-09-10T17:10:32.528296Z"
    },
    "papermill": {
     "duration": 0.118507,
     "end_time": "2024-09-10T17:10:32.531879",
     "exception": false,
     "start_time": "2024-09-10T17:10:32.413372",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.drop(\"index\",axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb5af593",
   "metadata": {
    "papermill": {
     "duration": 0.019123,
     "end_time": "2024-09-10T17:10:32.570819",
     "exception": false,
     "start_time": "2024-09-10T17:10:32.551696",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "2- RFM Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "0fdab577",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:10:32.612141Z",
     "iopub.status.busy": "2024-09-10T17:10:32.611170Z",
     "iopub.status.idle": "2024-09-10T17:10:34.205794Z",
     "shell.execute_reply": "2024-09-10T17:10:34.204445Z"
    },
    "papermill": {
     "duration": 1.617721,
     "end_time": "2024-09-10T17:10:34.208148",
     "exception": false,
     "start_time": "2024-09-10T17:10:32.590427",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/2018856930.py:21: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
      "  avg_spending_per_item = df.groupby('Customer ID').apply(lambda x: x['TotalAmountSpent'].sum() / x['Quantity'].sum())\n"
     ]
    }
   ],
   "source": [
    "invoice_grouped = df.groupby(['Customer ID', 'Invoice'])\n",
    "\n",
    "frequency = invoice_grouped['InvoiceDate'].count().groupby('Customer ID').count()\n",
    "\n",
    "total_items_bought = df.groupby('Customer ID')['Quantity'].sum()\n",
    "\n",
    "purchase_times = df.groupby(['Customer ID', 'PurchaseTime'])['Invoice'].nunique().unstack(fill_value=0)\n",
    "\n",
    "now = pd.Timestamp('now')\n",
    "recency = df.groupby('Customer ID')['InvoiceDate'].max().apply(lambda x: (now - x).days)\n",
    "monetary = df.groupby('Customer ID')['TotalAmountSpent'].sum()\n",
    "\n",
    "# Assuming a simple RFM score for demonstration, usually, these are binned into quantiles\n",
    "rfm = pd.DataFrame({\n",
    "    'RecencyValue': recency,\n",
    "    'FrequencyValue': frequency,\n",
    "    'MonetaryValue': monetary\n",
    "})\n",
    "\n",
    "avg_spending_per_invoice = monetary / frequency\n",
    "avg_spending_per_item = df.groupby('Customer ID').apply(lambda x: x['TotalAmountSpent'].sum() / x['Quantity'].sum())\n",
    "\n",
    "# Create a consolidated customer dataframe\n",
    "customer_df = pd.DataFrame({\n",
    "    'TotalItemsBought': total_items_bought,\n",
    "    'AvgSpendingPerInvoice': avg_spending_per_invoice,\n",
    "    'AvgSpendingPerItem': avg_spending_per_item,\n",
    "}).join(rfm)\n",
    "\n",
    "# Fill any missing values with 0 or an appropriate value\n",
    "customer_df.fillna(0, inplace=True)\n",
    "customer_df.reset_index(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "c2929a22",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:10:34.249921Z",
     "iopub.status.busy": "2024-09-10T17:10:34.248761Z",
     "iopub.status.idle": "2024-09-10T17:10:34.262051Z",
     "shell.execute_reply": "2024-09-10T17:10:34.261064Z"
    },
    "papermill": {
     "duration": 0.036209,
     "end_time": "2024-09-10T17:10:34.264110",
     "exception": false,
     "start_time": "2024-09-10T17:10:34.227901",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RecencyValue</th>\n",
       "      <th>FrequencyValue</th>\n",
       "      <th>MonetaryValue</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Customer ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>12346.0</th>\n",
       "      <td>5188</td>\n",
       "      <td>11</td>\n",
       "      <td>372.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12347.0</th>\n",
       "      <td>4661</td>\n",
       "      <td>8</td>\n",
       "      <td>4671.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12348.0</th>\n",
       "      <td>4734</td>\n",
       "      <td>5</td>\n",
       "      <td>1659.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12349.0</th>\n",
       "      <td>4677</td>\n",
       "      <td>3</td>\n",
       "      <td>3498.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12350.0</th>\n",
       "      <td>4969</td>\n",
       "      <td>1</td>\n",
       "      <td>294.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18283.0</th>\n",
       "      <td>4662</td>\n",
       "      <td>22</td>\n",
       "      <td>2664.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18284.0</th>\n",
       "      <td>5090</td>\n",
       "      <td>1</td>\n",
       "      <td>411.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18285.0</th>\n",
       "      <td>5319</td>\n",
       "      <td>1</td>\n",
       "      <td>377.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18286.0</th>\n",
       "      <td>5135</td>\n",
       "      <td>2</td>\n",
       "      <td>1171.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18287.0</th>\n",
       "      <td>4701</td>\n",
       "      <td>7</td>\n",
       "      <td>4132.99</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5812 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             RecencyValue  FrequencyValue  MonetaryValue\n",
       "Customer ID                                             \n",
       "12346.0              5188              11         372.86\n",
       "12347.0              4661               8        4671.93\n",
       "12348.0              4734               5        1659.40\n",
       "12349.0              4677               3        3498.94\n",
       "12350.0              4969               1         294.40\n",
       "...                   ...             ...            ...\n",
       "18283.0              4662              22        2664.90\n",
       "18284.0              5090               1         411.68\n",
       "18285.0              5319               1         377.00\n",
       "18286.0              5135               2        1171.58\n",
       "18287.0              4701               7        4132.99\n",
       "\n",
       "[5812 rows x 3 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "db05b6fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:10:34.305497Z",
     "iopub.status.busy": "2024-09-10T17:10:34.304530Z",
     "iopub.status.idle": "2024-09-10T17:10:34.312554Z",
     "shell.execute_reply": "2024-09-10T17:10:34.311665Z"
    },
    "papermill": {
     "duration": 0.0309,
     "end_time": "2024-09-10T17:10:34.314654",
     "exception": false,
     "start_time": "2024-09-10T17:10:34.283754",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "customer_df['Customer ID'] = customer_df['Customer ID'].replace('nan', np.nan)\n",
    "\n",
    "customer_df = customer_df.dropna(subset=['Customer ID'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "5ea6f3e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:10:34.356761Z",
     "iopub.status.busy": "2024-09-10T17:10:34.355695Z",
     "iopub.status.idle": "2024-09-10T17:10:34.361887Z",
     "shell.execute_reply": "2024-09-10T17:10:34.360906Z"
    },
    "papermill": {
     "duration": 0.029566,
     "end_time": "2024-09-10T17:10:34.364026",
     "exception": false,
     "start_time": "2024-09-10T17:10:34.334460",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "customer_df.drop(\"RecencyValue\",axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "fbda2550",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:10:34.405212Z",
     "iopub.status.busy": "2024-09-10T17:10:34.404800Z",
     "iopub.status.idle": "2024-09-10T17:10:34.477840Z",
     "shell.execute_reply": "2024-09-10T17:10:34.476800Z"
    },
    "papermill": {
     "duration": 0.09628,
     "end_time": "2024-09-10T17:10:34.480126",
     "exception": false,
     "start_time": "2024-09-10T17:10:34.383846",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Customer ID</th>\n",
       "      <th>TotalItemsBought</th>\n",
       "      <th>AvgSpendingPerInvoice</th>\n",
       "      <th>AvgSpendingPerItem</th>\n",
       "      <th>FrequencyValue</th>\n",
       "      <th>MonetaryValue</th>\n",
       "      <th>RecencyValue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12346.0</td>\n",
       "      <td>70</td>\n",
       "      <td>33.896364</td>\n",
       "      <td>5.326571</td>\n",
       "      <td>11</td>\n",
       "      <td>372.86</td>\n",
       "      <td>528</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12347.0</td>\n",
       "      <td>2727</td>\n",
       "      <td>583.991250</td>\n",
       "      <td>1.713212</td>\n",
       "      <td>8</td>\n",
       "      <td>4671.93</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12348.0</td>\n",
       "      <td>2705</td>\n",
       "      <td>331.880000</td>\n",
       "      <td>0.613457</td>\n",
       "      <td>5</td>\n",
       "      <td>1659.40</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12349.0</td>\n",
       "      <td>1616</td>\n",
       "      <td>1166.313333</td>\n",
       "      <td>2.165186</td>\n",
       "      <td>3</td>\n",
       "      <td>3498.94</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12350.0</td>\n",
       "      <td>196</td>\n",
       "      <td>294.400000</td>\n",
       "      <td>1.502041</td>\n",
       "      <td>1</td>\n",
       "      <td>294.40</td>\n",
       "      <td>309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5807</th>\n",
       "      <td>18283.0</td>\n",
       "      <td>1679</td>\n",
       "      <td>121.131818</td>\n",
       "      <td>1.587195</td>\n",
       "      <td>22</td>\n",
       "      <td>2664.90</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5808</th>\n",
       "      <td>18284.0</td>\n",
       "      <td>493</td>\n",
       "      <td>411.680000</td>\n",
       "      <td>0.835051</td>\n",
       "      <td>1</td>\n",
       "      <td>411.68</td>\n",
       "      <td>431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5809</th>\n",
       "      <td>18285.0</td>\n",
       "      <td>144</td>\n",
       "      <td>377.000000</td>\n",
       "      <td>2.618056</td>\n",
       "      <td>1</td>\n",
       "      <td>377.00</td>\n",
       "      <td>660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5810</th>\n",
       "      <td>18286.0</td>\n",
       "      <td>604</td>\n",
       "      <td>585.790000</td>\n",
       "      <td>1.939702</td>\n",
       "      <td>2</td>\n",
       "      <td>1171.58</td>\n",
       "      <td>476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5811</th>\n",
       "      <td>18287.0</td>\n",
       "      <td>3012</td>\n",
       "      <td>590.427143</td>\n",
       "      <td>1.372175</td>\n",
       "      <td>7</td>\n",
       "      <td>4132.99</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5812 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Customer ID  TotalItemsBought  AvgSpendingPerInvoice  \\\n",
       "0         12346.0                70              33.896364   \n",
       "1         12347.0              2727             583.991250   \n",
       "2         12348.0              2705             331.880000   \n",
       "3         12349.0              1616            1166.313333   \n",
       "4         12350.0               196             294.400000   \n",
       "...           ...               ...                    ...   \n",
       "5807      18283.0              1679             121.131818   \n",
       "5808      18284.0               493             411.680000   \n",
       "5809      18285.0               144             377.000000   \n",
       "5810      18286.0               604             585.790000   \n",
       "5811      18287.0              3012             590.427143   \n",
       "\n",
       "      AvgSpendingPerItem  FrequencyValue  MonetaryValue  RecencyValue  \n",
       "0               5.326571              11         372.86           528  \n",
       "1               1.713212               8        4671.93             1  \n",
       "2               0.613457               5        1659.40            74  \n",
       "3               2.165186               3        3498.94            18  \n",
       "4               1.502041               1         294.40           309  \n",
       "...                  ...             ...            ...           ...  \n",
       "5807            1.587195              22        2664.90             3  \n",
       "5808            0.835051               1         411.68           431  \n",
       "5809            2.618056               1         377.00           660  \n",
       "5810            1.939702               2        1171.58           476  \n",
       "5811            1.372175               7        4132.99            42  \n",
       "\n",
       "[5812 rows x 7 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])\n",
    "\n",
    "most_recent_invoice_date = df['InvoiceDate'].max()\n",
    "\n",
    "customer_recency = df.groupby('Customer ID')['InvoiceDate'].max().reset_index()\n",
    "customer_recency['RecencyValue'] = (most_recent_invoice_date - customer_recency['InvoiceDate']).dt.days\n",
    "\n",
    "# Drop the now redundant 'InvoiceDate' column\n",
    "customer_recency = customer_recency.drop('InvoiceDate', axis=1)\n",
    "\n",
    "# Merge this with the customer_df to include the RecencyValue for each customer\n",
    "customer_df = customer_df.merge(customer_recency, on='Customer ID', how='left')\n",
    "customer_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "170a7049",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:10:34.522190Z",
     "iopub.status.busy": "2024-09-10T17:10:34.521761Z",
     "iopub.status.idle": "2024-09-10T17:10:34.537235Z",
     "shell.execute_reply": "2024-09-10T17:10:34.536248Z"
    },
    "papermill": {
     "duration": 0.039022,
     "end_time": "2024-09-10T17:10:34.539429",
     "exception": false,
     "start_time": "2024-09-10T17:10:34.500407",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Customer ID</th>\n",
       "      <th>TotalItemsBought</th>\n",
       "      <th>AvgSpendingPerInvoice</th>\n",
       "      <th>AvgSpendingPerItem</th>\n",
       "      <th>FrequencyValue</th>\n",
       "      <th>MonetaryValue</th>\n",
       "      <th>RecencyValue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12346.0</td>\n",
       "      <td>70</td>\n",
       "      <td>33.896364</td>\n",
       "      <td>5.326571</td>\n",
       "      <td>11</td>\n",
       "      <td>372.86</td>\n",
       "      <td>528</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12347.0</td>\n",
       "      <td>2727</td>\n",
       "      <td>583.991250</td>\n",
       "      <td>1.713212</td>\n",
       "      <td>8</td>\n",
       "      <td>4671.93</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12348.0</td>\n",
       "      <td>2705</td>\n",
       "      <td>331.880000</td>\n",
       "      <td>0.613457</td>\n",
       "      <td>5</td>\n",
       "      <td>1659.40</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12349.0</td>\n",
       "      <td>1616</td>\n",
       "      <td>1166.313333</td>\n",
       "      <td>2.165186</td>\n",
       "      <td>3</td>\n",
       "      <td>3498.94</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12350.0</td>\n",
       "      <td>196</td>\n",
       "      <td>294.400000</td>\n",
       "      <td>1.502041</td>\n",
       "      <td>1</td>\n",
       "      <td>294.40</td>\n",
       "      <td>309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5807</th>\n",
       "      <td>18283.0</td>\n",
       "      <td>1679</td>\n",
       "      <td>121.131818</td>\n",
       "      <td>1.587195</td>\n",
       "      <td>22</td>\n",
       "      <td>2664.90</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5808</th>\n",
       "      <td>18284.0</td>\n",
       "      <td>493</td>\n",
       "      <td>411.680000</td>\n",
       "      <td>0.835051</td>\n",
       "      <td>1</td>\n",
       "      <td>411.68</td>\n",
       "      <td>431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5809</th>\n",
       "      <td>18285.0</td>\n",
       "      <td>144</td>\n",
       "      <td>377.000000</td>\n",
       "      <td>2.618056</td>\n",
       "      <td>1</td>\n",
       "      <td>377.00</td>\n",
       "      <td>660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5810</th>\n",
       "      <td>18286.0</td>\n",
       "      <td>604</td>\n",
       "      <td>585.790000</td>\n",
       "      <td>1.939702</td>\n",
       "      <td>2</td>\n",
       "      <td>1171.58</td>\n",
       "      <td>476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5811</th>\n",
       "      <td>18287.0</td>\n",
       "      <td>3012</td>\n",
       "      <td>590.427143</td>\n",
       "      <td>1.372175</td>\n",
       "      <td>7</td>\n",
       "      <td>4132.99</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5812 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Customer ID  TotalItemsBought  AvgSpendingPerInvoice  \\\n",
       "0         12346.0                70              33.896364   \n",
       "1         12347.0              2727             583.991250   \n",
       "2         12348.0              2705             331.880000   \n",
       "3         12349.0              1616            1166.313333   \n",
       "4         12350.0               196             294.400000   \n",
       "...           ...               ...                    ...   \n",
       "5807      18283.0              1679             121.131818   \n",
       "5808      18284.0               493             411.680000   \n",
       "5809      18285.0               144             377.000000   \n",
       "5810      18286.0               604             585.790000   \n",
       "5811      18287.0              3012             590.427143   \n",
       "\n",
       "      AvgSpendingPerItem  FrequencyValue  MonetaryValue  RecencyValue  \n",
       "0               5.326571              11         372.86           528  \n",
       "1               1.713212               8        4671.93             1  \n",
       "2               0.613457               5        1659.40            74  \n",
       "3               2.165186               3        3498.94            18  \n",
       "4               1.502041               1         294.40           309  \n",
       "...                  ...             ...            ...           ...  \n",
       "5807            1.587195              22        2664.90             3  \n",
       "5808            0.835051               1         411.68           431  \n",
       "5809            2.618056               1         377.00           660  \n",
       "5810            1.939702               2        1171.58           476  \n",
       "5811            1.372175               7        4132.99            42  \n",
       "\n",
       "[5812 rows x 7 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "customer_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "b0f13239",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:10:34.582451Z",
     "iopub.status.busy": "2024-09-10T17:10:34.581672Z",
     "iopub.status.idle": "2024-09-10T17:10:34.598823Z",
     "shell.execute_reply": "2024-09-10T17:10:34.597923Z"
    },
    "papermill": {
     "duration": 0.040947,
     "end_time": "2024-09-10T17:10:34.600969",
     "exception": false,
     "start_time": "2024-09-10T17:10:34.560022",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create the recency_score, frequency_score, and monetary_score values.\n",
    "customer_df[\"Recency_Score\"] = pd.qcut(customer_df[\"RecencyValue\"], 5, labels = [5, 4, 3, 2, 1]) \n",
    "customer_df[\"Frequency_Score\"] = pd.qcut(customer_df[\"FrequencyValue\"].rank(method = \"first\"), 5, labels = [1, 2, 3, 4, 5])\n",
    "customer_df[\"Monetary_Score\"] = pd.qcut(customer_df[\"MonetaryValue\"], 5, labels = [1, 2, 3, 4, 5])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "fb7e9dbd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:10:34.643717Z",
     "iopub.status.busy": "2024-09-10T17:10:34.642967Z",
     "iopub.status.idle": "2024-09-10T17:10:34.651281Z",
     "shell.execute_reply": "2024-09-10T17:10:34.650247Z"
    },
    "papermill": {
     "duration": 0.032058,
     "end_time": "2024-09-10T17:10:34.653376",
     "exception": false,
     "start_time": "2024-09-10T17:10:34.621318",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "customer_df[\"RF_Score\"] = customer_df[\"Recency_Score\"].astype(str) + customer_df[\"Frequency_Score\"].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "2e76e7b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:10:34.696220Z",
     "iopub.status.busy": "2024-09-10T17:10:34.695792Z",
     "iopub.status.idle": "2024-09-10T17:10:34.777195Z",
     "shell.execute_reply": "2024-09-10T17:10:34.776336Z"
    },
    "papermill": {
     "duration": 0.105448,
     "end_time": "2024-09-10T17:10:34.779586",
     "exception": false,
     "start_time": "2024-09-10T17:10:34.674138",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "seg_map = {\n",
    "    r'[1-2][1-2]' : 'Hibernating',\n",
    "    r'[1-2][3-4]' : 'At_risk',\n",
    "    r'[1-2]5' : 'Cant-loose',\n",
    "    r'3[1-2]' : 'About_to_sleep',\n",
    "    r'33' : 'Need_attention',\n",
    "    r'[3-4][4-5]' : 'Loyal_customers',\n",
    "    r'41' : 'Promising',\n",
    "    r'51' : 'New_customers',\n",
    "    r'[4-5][2-3]' : 'Potential_loyalists',\n",
    "    r'5[4-5]' : 'Champions'}\n",
    "\n",
    "customer_df[\"RFM Segment\"] = customer_df[\"RF_Score\"].replace(seg_map, regex = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "2611c8cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:10:34.822714Z",
     "iopub.status.busy": "2024-09-10T17:10:34.822238Z",
     "iopub.status.idle": "2024-09-10T17:10:34.843203Z",
     "shell.execute_reply": "2024-09-10T17:10:34.842188Z"
    },
    "papermill": {
     "duration": 0.045274,
     "end_time": "2024-09-10T17:10:34.845311",
     "exception": false,
     "start_time": "2024-09-10T17:10:34.800037",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Customer ID</th>\n",
       "      <th>TotalItemsBought</th>\n",
       "      <th>AvgSpendingPerInvoice</th>\n",
       "      <th>AvgSpendingPerItem</th>\n",
       "      <th>FrequencyValue</th>\n",
       "      <th>MonetaryValue</th>\n",
       "      <th>RecencyValue</th>\n",
       "      <th>Recency_Score</th>\n",
       "      <th>Frequency_Score</th>\n",
       "      <th>Monetary_Score</th>\n",
       "      <th>RF_Score</th>\n",
       "      <th>RFM Segment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12346.0</td>\n",
       "      <td>70</td>\n",
       "      <td>33.896364</td>\n",
       "      <td>5.326571</td>\n",
       "      <td>11</td>\n",
       "      <td>372.86</td>\n",
       "      <td>528</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>Cant-loose</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12347.0</td>\n",
       "      <td>2727</td>\n",
       "      <td>583.991250</td>\n",
       "      <td>1.713212</td>\n",
       "      <td>8</td>\n",
       "      <td>4671.93</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>54</td>\n",
       "      <td>Champions</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12348.0</td>\n",
       "      <td>2705</td>\n",
       "      <td>331.880000</td>\n",
       "      <td>0.613457</td>\n",
       "      <td>5</td>\n",
       "      <td>1659.40</td>\n",
       "      <td>74</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>34</td>\n",
       "      <td>Loyal_customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12349.0</td>\n",
       "      <td>1616</td>\n",
       "      <td>1166.313333</td>\n",
       "      <td>2.165186</td>\n",
       "      <td>3</td>\n",
       "      <td>3498.94</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>53</td>\n",
       "      <td>Potential_loyalists</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12350.0</td>\n",
       "      <td>196</td>\n",
       "      <td>294.400000</td>\n",
       "      <td>1.502041</td>\n",
       "      <td>1</td>\n",
       "      <td>294.40</td>\n",
       "      <td>309</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>21</td>\n",
       "      <td>Hibernating</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5807</th>\n",
       "      <td>18283.0</td>\n",
       "      <td>1679</td>\n",
       "      <td>121.131818</td>\n",
       "      <td>1.587195</td>\n",
       "      <td>22</td>\n",
       "      <td>2664.90</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>55</td>\n",
       "      <td>Champions</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5808</th>\n",
       "      <td>18284.0</td>\n",
       "      <td>493</td>\n",
       "      <td>411.680000</td>\n",
       "      <td>0.835051</td>\n",
       "      <td>1</td>\n",
       "      <td>411.68</td>\n",
       "      <td>431</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>Hibernating</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5809</th>\n",
       "      <td>18285.0</td>\n",
       "      <td>144</td>\n",
       "      <td>377.000000</td>\n",
       "      <td>2.618056</td>\n",
       "      <td>1</td>\n",
       "      <td>377.00</td>\n",
       "      <td>660</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>Hibernating</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5810</th>\n",
       "      <td>18286.0</td>\n",
       "      <td>604</td>\n",
       "      <td>585.790000</td>\n",
       "      <td>1.939702</td>\n",
       "      <td>2</td>\n",
       "      <td>1171.58</td>\n",
       "      <td>476</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>13</td>\n",
       "      <td>At_risk</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5811</th>\n",
       "      <td>18287.0</td>\n",
       "      <td>3012</td>\n",
       "      <td>590.427143</td>\n",
       "      <td>1.372175</td>\n",
       "      <td>7</td>\n",
       "      <td>4132.99</td>\n",
       "      <td>42</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>44</td>\n",
       "      <td>Loyal_customers</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5812 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Customer ID  TotalItemsBought  AvgSpendingPerInvoice  \\\n",
       "0         12346.0                70              33.896364   \n",
       "1         12347.0              2727             583.991250   \n",
       "2         12348.0              2705             331.880000   \n",
       "3         12349.0              1616            1166.313333   \n",
       "4         12350.0               196             294.400000   \n",
       "...           ...               ...                    ...   \n",
       "5807      18283.0              1679             121.131818   \n",
       "5808      18284.0               493             411.680000   \n",
       "5809      18285.0               144             377.000000   \n",
       "5810      18286.0               604             585.790000   \n",
       "5811      18287.0              3012             590.427143   \n",
       "\n",
       "      AvgSpendingPerItem  FrequencyValue  MonetaryValue  RecencyValue  \\\n",
       "0               5.326571              11         372.86           528   \n",
       "1               1.713212               8        4671.93             1   \n",
       "2               0.613457               5        1659.40            74   \n",
       "3               2.165186               3        3498.94            18   \n",
       "4               1.502041               1         294.40           309   \n",
       "...                  ...             ...            ...           ...   \n",
       "5807            1.587195              22        2664.90             3   \n",
       "5808            0.835051               1         411.68           431   \n",
       "5809            2.618056               1         377.00           660   \n",
       "5810            1.939702               2        1171.58           476   \n",
       "5811            1.372175               7        4132.99            42   \n",
       "\n",
       "     Recency_Score Frequency_Score Monetary_Score RF_Score  \\\n",
       "0                1               5              2       15   \n",
       "1                5               4              5       54   \n",
       "2                3               4              4       34   \n",
       "3                5               3              5       53   \n",
       "4                2               1              2       21   \n",
       "...            ...             ...            ...      ...   \n",
       "5807             5               5              4       55   \n",
       "5808             1               2              2       12   \n",
       "5809             1               2              2       12   \n",
       "5810             1               3              4       13   \n",
       "5811             4               4              5       44   \n",
       "\n",
       "              RFM Segment  \n",
       "0              Cant-loose  \n",
       "1               Champions  \n",
       "2         Loyal_customers  \n",
       "3     Potential_loyalists  \n",
       "4             Hibernating  \n",
       "...                   ...  \n",
       "5807            Champions  \n",
       "5808          Hibernating  \n",
       "5809          Hibernating  \n",
       "5810              At_risk  \n",
       "5811      Loyal_customers  \n",
       "\n",
       "[5812 rows x 12 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "customer_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "5dff16a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:10:34.888367Z",
     "iopub.status.busy": "2024-09-10T17:10:34.887936Z",
     "iopub.status.idle": "2024-09-10T17:10:34.919426Z",
     "shell.execute_reply": "2024-09-10T17:10:34.918454Z"
    },
    "papermill": {
     "duration": 0.055784,
     "end_time": "2024-09-10T17:10:34.921755",
     "exception": false,
     "start_time": "2024-09-10T17:10:34.865971",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"5\" halign=\"left\">RecencyValue</th>\n",
       "      <th colspan=\"5\" halign=\"left\">FrequencyValue</th>\n",
       "      <th colspan=\"5\" halign=\"left\">MonetaryValue</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>sum</th>\n",
       "      <th>count</th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "      <th>mean</th>\n",
       "      <th>sum</th>\n",
       "      <th>count</th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "      <th>mean</th>\n",
       "      <th>sum</th>\n",
       "      <th>count</th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RFM Segment</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>About_to_sleep</th>\n",
       "      <td>106.076316</td>\n",
       "      <td>40309</td>\n",
       "      <td>380</td>\n",
       "      <td>59</td>\n",
       "      <td>186</td>\n",
       "      <td>1.357895</td>\n",
       "      <td>516</td>\n",
       "      <td>380</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>509.558087</td>\n",
       "      <td>193632.073</td>\n",
       "      <td>380</td>\n",
       "      <td>4.95</td>\n",
       "      <td>5375.741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>At_risk</th>\n",
       "      <td>369.582109</td>\n",
       "      <td>276817</td>\n",
       "      <td>749</td>\n",
       "      <td>187</td>\n",
       "      <td>732</td>\n",
       "      <td>3.905207</td>\n",
       "      <td>2925</td>\n",
       "      <td>749</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>1173.343551</td>\n",
       "      <td>878834.320</td>\n",
       "      <td>749</td>\n",
       "      <td>38.92</td>\n",
       "      <td>9303.240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cant-loose</th>\n",
       "      <td>336.767123</td>\n",
       "      <td>24584</td>\n",
       "      <td>73</td>\n",
       "      <td>191</td>\n",
       "      <td>623</td>\n",
       "      <td>15.904110</td>\n",
       "      <td>1161</td>\n",
       "      <td>73</td>\n",
       "      <td>8</td>\n",
       "      <td>155</td>\n",
       "      <td>5875.478795</td>\n",
       "      <td>428909.952</td>\n",
       "      <td>73</td>\n",
       "      <td>372.86</td>\n",
       "      <td>53634.250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Champions</th>\n",
       "      <td>7.600481</td>\n",
       "      <td>6316</td>\n",
       "      <td>831</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>18.864019</td>\n",
       "      <td>15676</td>\n",
       "      <td>831</td>\n",
       "      <td>4</td>\n",
       "      <td>375</td>\n",
       "      <td>8418.988670</td>\n",
       "      <td>6996179.585</td>\n",
       "      <td>831</td>\n",
       "      <td>357.00</td>\n",
       "      <td>341877.570</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hibernating</th>\n",
       "      <td>456.394000</td>\n",
       "      <td>684591</td>\n",
       "      <td>1500</td>\n",
       "      <td>188</td>\n",
       "      <td>738</td>\n",
       "      <td>1.249333</td>\n",
       "      <td>1874</td>\n",
       "      <td>1500</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>371.938995</td>\n",
       "      <td>557908.492</td>\n",
       "      <td>1500</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8951.260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Loyal_customers</th>\n",
       "      <td>65.162852</td>\n",
       "      <td>74025</td>\n",
       "      <td>1136</td>\n",
       "      <td>19</td>\n",
       "      <td>186</td>\n",
       "      <td>9.720951</td>\n",
       "      <td>11043</td>\n",
       "      <td>1136</td>\n",
       "      <td>4</td>\n",
       "      <td>100</td>\n",
       "      <td>3700.733305</td>\n",
       "      <td>4204033.035</td>\n",
       "      <td>1136</td>\n",
       "      <td>30.95</td>\n",
       "      <td>91614.540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Need_attention</th>\n",
       "      <td>112.067416</td>\n",
       "      <td>29922</td>\n",
       "      <td>267</td>\n",
       "      <td>59</td>\n",
       "      <td>186</td>\n",
       "      <td>3.131086</td>\n",
       "      <td>836</td>\n",
       "      <td>267</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1095.497378</td>\n",
       "      <td>292497.800</td>\n",
       "      <td>267</td>\n",
       "      <td>120.90</td>\n",
       "      <td>5079.200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>New_customers</th>\n",
       "      <td>9.759259</td>\n",
       "      <td>527</td>\n",
       "      <td>54</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>54</td>\n",
       "      <td>54</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>285.931481</td>\n",
       "      <td>15440.300</td>\n",
       "      <td>54</td>\n",
       "      <td>43.20</td>\n",
       "      <td>848.550</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Potential_loyalists</th>\n",
       "      <td>24.719149</td>\n",
       "      <td>17427</td>\n",
       "      <td>705</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>2.575887</td>\n",
       "      <td>1816</td>\n",
       "      <td>705</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>833.888299</td>\n",
       "      <td>587891.251</td>\n",
       "      <td>705</td>\n",
       "      <td>20.80</td>\n",
       "      <td>17412.660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Promising</th>\n",
       "      <td>38.017094</td>\n",
       "      <td>4448</td>\n",
       "      <td>117</td>\n",
       "      <td>19</td>\n",
       "      <td>58</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>117</td>\n",
       "      <td>117</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>345.289060</td>\n",
       "      <td>40398.820</td>\n",
       "      <td>117</td>\n",
       "      <td>30.00</td>\n",
       "      <td>4279.710</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    RecencyValue                         FrequencyValue  \\\n",
       "                            mean     sum count  min  max           mean   \n",
       "RFM Segment                                                               \n",
       "About_to_sleep        106.076316   40309   380   59  186       1.357895   \n",
       "At_risk               369.582109  276817   749  187  732       3.905207   \n",
       "Cant-loose            336.767123   24584    73  191  623      15.904110   \n",
       "Champions               7.600481    6316   831    0   18      18.864019   \n",
       "Hibernating           456.394000  684591  1500  188  738       1.249333   \n",
       "Loyal_customers        65.162852   74025  1136   19  186       9.720951   \n",
       "Need_attention        112.067416   29922   267   59  186       3.131086   \n",
       "New_customers           9.759259     527    54    0   18       1.000000   \n",
       "Potential_loyalists    24.719149   17427   705    0   58       2.575887   \n",
       "Promising              38.017094    4448   117   19   58       1.000000   \n",
       "\n",
       "                                          MonetaryValue                     \\\n",
       "                       sum count min  max          mean          sum count   \n",
       "RFM Segment                                                                  \n",
       "About_to_sleep         516   380   1    2    509.558087   193632.073   380   \n",
       "At_risk               2925   749   2    8   1173.343551   878834.320   749   \n",
       "Cant-loose            1161    73   8  155   5875.478795   428909.952    73   \n",
       "Champions            15676   831   4  375   8418.988670  6996179.585   831   \n",
       "Hibernating           1874  1500   1    2    371.938995   557908.492  1500   \n",
       "Loyal_customers      11043  1136   4  100   3700.733305  4204033.035  1136   \n",
       "Need_attention         836   267   2    4   1095.497378   292497.800   267   \n",
       "New_customers           54    54   1    1    285.931481    15440.300    54   \n",
       "Potential_loyalists   1816   705   1    4    833.888299   587891.251   705   \n",
       "Promising              117   117   1    1    345.289060    40398.820   117   \n",
       "\n",
       "                                         \n",
       "                        min         max  \n",
       "RFM Segment                              \n",
       "About_to_sleep         4.95    5375.741  \n",
       "At_risk               38.92    9303.240  \n",
       "Cant-loose           372.86   53634.250  \n",
       "Champions            357.00  341877.570  \n",
       "Hibernating            0.00    8951.260  \n",
       "Loyal_customers       30.95   91614.540  \n",
       "Need_attention       120.90    5079.200  \n",
       "New_customers         43.20     848.550  \n",
       "Potential_loyalists   20.80   17412.660  \n",
       "Promising             30.00    4279.710  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "customer_df[[\"RFM Segment\", \"RecencyValue\", \"FrequencyValue\", \"MonetaryValue\"]].groupby(\"RFM Segment\").agg([\"mean\", \"sum\", \"count\",\"min\",\"max\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "097c0e48",
   "metadata": {
    "papermill": {
     "duration": 0.020841,
     "end_time": "2024-09-10T17:10:34.963807",
     "exception": false,
     "start_time": "2024-09-10T17:10:34.942966",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "3- Customer Segmentation with K-Means"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "030d204c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:10:35.008090Z",
     "iopub.status.busy": "2024-09-10T17:10:35.007675Z",
     "iopub.status.idle": "2024-09-10T17:11:00.638119Z",
     "shell.execute_reply": "2024-09-10T17:11:00.637049Z"
    },
    "papermill": {
     "duration": 25.655451,
     "end_time": "2024-09-10T17:11:00.640353",
     "exception": false,
     "start_time": "2024-09-10T17:10:34.984902",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: yellowbrick in /opt/conda/lib/python3.10/site-packages (1.5)\r\n",
      "Requirement already satisfied: matplotlib!=3.0.0,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from yellowbrick) (3.7.5)\r\n",
      "Requirement already satisfied: scipy>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from yellowbrick) (1.14.0)\r\n",
      "Requirement already satisfied: scikit-learn>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from yellowbrick) (1.2.2)\r\n",
      "Requirement already satisfied: numpy>=1.16.0 in /opt/conda/lib/python3.10/site-packages (from yellowbrick) (1.26.4)\r\n",
      "Requirement already satisfied: cycler>=0.10.0 in /opt/conda/lib/python3.10/site-packages (from yellowbrick) (0.12.1)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib!=3.0.0,>=2.0.2->yellowbrick) (1.2.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib!=3.0.0,>=2.0.2->yellowbrick) (4.53.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib!=3.0.0,>=2.0.2->yellowbrick) (1.4.5)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib!=3.0.0,>=2.0.2->yellowbrick) (21.3)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib!=3.0.0,>=2.0.2->yellowbrick) (9.5.0)\r\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib!=3.0.0,>=2.0.2->yellowbrick) (3.1.2)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib!=3.0.0,>=2.0.2->yellowbrick) (2.9.0.post0)\r\n",
      "Requirement already satisfied: joblib>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=1.0.0->yellowbrick) (1.4.2)\r\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=1.0.0->yellowbrick) (3.5.0)\r\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib!=3.0.0,>=2.0.2->yellowbrick) (1.16.0)\r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x550 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Axes: title={'center': 'Distortion Score Elbow for KMeans Clustering'}, xlabel='k', ylabel='distortion score'>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "!pip install yellowbrick\n",
    "import pandas as pd\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from yellowbrick.cluster import KElbowVisualizer\n",
    "\n",
    "\n",
    "\n",
    "# Selecting features for clustering\n",
    "features = customer_df[['TotalItemsBought', 'AvgSpendingPerInvoice', 'AvgSpendingPerItem',\n",
    "                        \n",
    "                        \n",
    "                        'RecencyValue', 'FrequencyValue', 'MonetaryValue']]\n",
    "\n",
    "# Standardizing the features\n",
    "scaler = StandardScaler()\n",
    "features_scaled = scaler.fit_transform(features)\n",
    "\n",
    "# Setting up the KMeans model\n",
    "model = KMeans(random_state=42)\n",
    "\n",
    "visualizer = KElbowVisualizer(model, k=(2,10), timings=False, locate_elbow=True, metric='distortion')\n",
    "\n",
    "visualizer.fit(features_scaled)  # Fit the data to the visualizer\n",
    "visualizer.show()               # Finalize and render the figure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "78847316",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:00.688467Z",
     "iopub.status.busy": "2024-09-10T17:11:00.687311Z",
     "iopub.status.idle": "2024-09-10T17:11:01.898099Z",
     "shell.execute_reply": "2024-09-10T17:11:01.897089Z"
    },
    "papermill": {
     "duration": 1.237214,
     "end_time": "2024-09-10T17:11:01.900467",
     "exception": false,
     "start_time": "2024-09-10T17:11:00.663253",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Customer ID</th>\n",
       "      <th>TotalItemsBought</th>\n",
       "      <th>AvgSpendingPerInvoice</th>\n",
       "      <th>AvgSpendingPerItem</th>\n",
       "      <th>FrequencyValue</th>\n",
       "      <th>MonetaryValue</th>\n",
       "      <th>RecencyValue</th>\n",
       "      <th>Recency_Score</th>\n",
       "      <th>Frequency_Score</th>\n",
       "      <th>Monetary_Score</th>\n",
       "      <th>RF_Score</th>\n",
       "      <th>RFM Segment</th>\n",
       "      <th>Cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12346.0</td>\n",
       "      <td>70</td>\n",
       "      <td>33.896364</td>\n",
       "      <td>5.326571</td>\n",
       "      <td>11</td>\n",
       "      <td>372.86</td>\n",
       "      <td>528</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>Cant-loose</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12347.0</td>\n",
       "      <td>2727</td>\n",
       "      <td>583.991250</td>\n",
       "      <td>1.713212</td>\n",
       "      <td>8</td>\n",
       "      <td>4671.93</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>54</td>\n",
       "      <td>Champions</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12348.0</td>\n",
       "      <td>2705</td>\n",
       "      <td>331.880000</td>\n",
       "      <td>0.613457</td>\n",
       "      <td>5</td>\n",
       "      <td>1659.40</td>\n",
       "      <td>74</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>34</td>\n",
       "      <td>Loyal_customers</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12349.0</td>\n",
       "      <td>1616</td>\n",
       "      <td>1166.313333</td>\n",
       "      <td>2.165186</td>\n",
       "      <td>3</td>\n",
       "      <td>3498.94</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>53</td>\n",
       "      <td>Potential_loyalists</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12350.0</td>\n",
       "      <td>196</td>\n",
       "      <td>294.400000</td>\n",
       "      <td>1.502041</td>\n",
       "      <td>1</td>\n",
       "      <td>294.40</td>\n",
       "      <td>309</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>21</td>\n",
       "      <td>Hibernating</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Customer ID  TotalItemsBought  AvgSpendingPerInvoice  AvgSpendingPerItem  \\\n",
       "0      12346.0                70              33.896364            5.326571   \n",
       "1      12347.0              2727             583.991250            1.713212   \n",
       "2      12348.0              2705             331.880000            0.613457   \n",
       "3      12349.0              1616            1166.313333            2.165186   \n",
       "4      12350.0               196             294.400000            1.502041   \n",
       "\n",
       "   FrequencyValue  MonetaryValue  RecencyValue Recency_Score Frequency_Score  \\\n",
       "0              11         372.86           528             1               5   \n",
       "1               8        4671.93             1             5               4   \n",
       "2               5        1659.40            74             3               4   \n",
       "3               3        3498.94            18             5               3   \n",
       "4               1         294.40           309             2               1   \n",
       "\n",
       "  Monetary_Score RF_Score          RFM Segment  Cluster  \n",
       "0              2       15           Cant-loose        4  \n",
       "1              5       54            Champions        0  \n",
       "2              4       34      Loyal_customers        0  \n",
       "3              5       53  Potential_loyalists        0  \n",
       "4              2       21          Hibernating        3  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "kmeans = KMeans(n_clusters=5, random_state=42)\n",
    "\n",
    "# Fit the model on the scaled features\n",
    "kmeans.fit(features_scaled)\n",
    "\n",
    "# Assign the labels to a new column in the customer_df\n",
    "customer_df['Cluster'] = kmeans.labels_\n",
    "\n",
    "# Check the first few rows to see the cluster labels\n",
    "customer_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "47a23396",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:01.949364Z",
     "iopub.status.busy": "2024-09-10T17:11:01.948355Z",
     "iopub.status.idle": "2024-09-10T17:11:04.446684Z",
     "shell.execute_reply": "2024-09-10T17:11:04.445469Z"
    },
    "papermill": {
     "duration": 2.525006,
     "end_time": "2024-09-10T17:11:04.448901",
     "exception": false,
     "start_time": "2024-09-10T17:11:01.923895",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "        <script type=\"text/javascript\">\n",
       "        window.PlotlyConfig = {MathJaxConfig: 'local'};\n",
       "        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n",
       "        if (typeof require !== 'undefined') {\n",
       "        require.undef(\"plotly\");\n",
       "        requirejs.config({\n",
       "            paths: {\n",
       "                'plotly': ['https://cdn.plot.ly/plotly-2.32.0.min']\n",
       "            }\n",
       "        });\n",
       "        require(['plotly'], function(Plotly) {\n",
       "            window._Plotly = Plotly;\n",
       "        });\n",
       "        }\n",
       "        </script>\n",
       "        "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>                            <div id=\"4dc53f68-5366-41ee-856a-181a94d1cd0f\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"4dc53f68-5366-41ee-856a-181a94d1cd0f\")) {                    Plotly.newPlot(                        \"4dc53f68-5366-41ee-856a-181a94d1cd0f\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Count=%{x}\\u003cbr\\u003eCluster=%{y}\\u003cbr\\u003ecolor=%{marker.color}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":[13,302,306,1760,3431],\"coloraxis\":\"coloraxis\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"h\",\"showlegend\":false,\"textposition\":\"auto\",\"texttemplate\":\"%{x}\",\"x\":[13,302,306,1760,3431],\"xaxis\":\"x\",\"y\":[1,2,4,3,0],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Count\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Cluster\"}},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"color\"}},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Count of Rows by Cluster\"},\"barmode\":\"relative\"},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('4dc53f68-5366-41ee-856a-181a94d1cd0f');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import plotly.express as px\n",
    "\n",
    "# Count the number of rows for each cluster\n",
    "cluster_count = customer_df['Cluster'].value_counts().sort_values(ascending=True)\n",
    "\n",
    "# Plot\n",
    "fig_cluster = px.bar(cluster_count,\n",
    "                     color=cluster_count.values,\n",
    "                     labels={'index': 'Cluster', 'value': 'Count'},\n",
    "                     title='Count of Rows by Cluster',\n",
    "                     text_auto=True,\n",
    "                     orientation='h'\n",
    "                    )\n",
    "\n",
    "fig_cluster.update_layout(xaxis_title=\"Count\", yaxis_title=\"Cluster\")\n",
    "fig_cluster.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "3347334c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:04.498155Z",
     "iopub.status.busy": "2024-09-10T17:11:04.497185Z",
     "iopub.status.idle": "2024-09-10T17:11:04.565261Z",
     "shell.execute_reply": "2024-09-10T17:11:04.564328Z"
    },
    "papermill": {
     "duration": 0.094762,
     "end_time": "2024-09-10T17:11:04.567380",
     "exception": false,
     "start_time": "2024-09-10T17:11:04.472618",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>                            <div id=\"d408afaa-b622-439c-8d72-5bdc7fbe7e4a\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"d408afaa-b622-439c-8d72-5bdc7fbe7e4a\")) {                    Plotly.newPlot(                        \"d408afaa-b622-439c-8d72-5bdc7fbe7e4a\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Count=%{x}\\u003cbr\\u003eRFM Segment=%{y}\\u003cbr\\u003ecolor=%{marker.color}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":[54,73,117,267,380,705,749,831,1136,1500],\"coloraxis\":\"coloraxis\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"h\",\"showlegend\":false,\"textposition\":\"auto\",\"texttemplate\":\"%{x}\",\"x\":[54,73,117,267,380,705,749,831,1136,1500],\"xaxis\":\"x\",\"y\":[\"New_customers\",\"Cant-loose\",\"Promising\",\"Need_attention\",\"About_to_sleep\",\"Potential_loyalists\",\"At_risk\",\"Champions\",\"Loyal_customers\",\"Hibernating\"],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Count\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"RFM Segment\"}},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"color\"}},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Count of Rows by RFM Segment\"},\"barmode\":\"relative\"},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('d408afaa-b622-439c-8d72-5bdc7fbe7e4a');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import plotly.express as px\n",
    "\n",
    "# Count the number of rows for each RFM Segment\n",
    "rfm_segment_count = customer_df['RFM Segment'].value_counts().sort_values(ascending=True)\n",
    "\n",
    "# Plot\n",
    "fig_rfm = px.bar(rfm_segment_count,\n",
    "                 color=rfm_segment_count.values,\n",
    "                 labels={'index': 'RFM Segment', 'value': 'Count'},\n",
    "                 title='Count of Rows by RFM Segment',\n",
    "                 text_auto=True,\n",
    "                 orientation='h'\n",
    "                )\n",
    "\n",
    "fig_rfm.update_layout(xaxis_title=\"Count\", yaxis_title=\"RFM Segment\")\n",
    "fig_rfm.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "5baa3edb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:04.616291Z",
     "iopub.status.busy": "2024-09-10T17:11:04.615870Z",
     "iopub.status.idle": "2024-09-10T17:11:04.636088Z",
     "shell.execute_reply": "2024-09-10T17:11:04.635109Z"
    },
    "papermill": {
     "duration": 0.047526,
     "end_time": "2024-09-10T17:11:04.638539",
     "exception": false,
     "start_time": "2024-09-10T17:11:04.591013",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Customer ID</th>\n",
       "      <th>TotalItemsBought</th>\n",
       "      <th>AvgSpendingPerInvoice</th>\n",
       "      <th>AvgSpendingPerItem</th>\n",
       "      <th>FrequencyValue</th>\n",
       "      <th>MonetaryValue</th>\n",
       "      <th>RecencyValue</th>\n",
       "      <th>Recency_Score</th>\n",
       "      <th>Frequency_Score</th>\n",
       "      <th>Monetary_Score</th>\n",
       "      <th>RF_Score</th>\n",
       "      <th>RFM Segment</th>\n",
       "      <th>Cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12346.0</td>\n",
       "      <td>70</td>\n",
       "      <td>33.896364</td>\n",
       "      <td>5.326571</td>\n",
       "      <td>11</td>\n",
       "      <td>372.86</td>\n",
       "      <td>528</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>Cant-loose</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12347.0</td>\n",
       "      <td>2727</td>\n",
       "      <td>583.991250</td>\n",
       "      <td>1.713212</td>\n",
       "      <td>8</td>\n",
       "      <td>4671.93</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>54</td>\n",
       "      <td>Champions</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12348.0</td>\n",
       "      <td>2705</td>\n",
       "      <td>331.880000</td>\n",
       "      <td>0.613457</td>\n",
       "      <td>5</td>\n",
       "      <td>1659.40</td>\n",
       "      <td>74</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>34</td>\n",
       "      <td>Loyal_customers</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12349.0</td>\n",
       "      <td>1616</td>\n",
       "      <td>1166.313333</td>\n",
       "      <td>2.165186</td>\n",
       "      <td>3</td>\n",
       "      <td>3498.94</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>53</td>\n",
       "      <td>Potential_loyalists</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12350.0</td>\n",
       "      <td>196</td>\n",
       "      <td>294.400000</td>\n",
       "      <td>1.502041</td>\n",
       "      <td>1</td>\n",
       "      <td>294.40</td>\n",
       "      <td>309</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>21</td>\n",
       "      <td>Hibernating</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5807</th>\n",
       "      <td>18283.0</td>\n",
       "      <td>1679</td>\n",
       "      <td>121.131818</td>\n",
       "      <td>1.587195</td>\n",
       "      <td>22</td>\n",
       "      <td>2664.90</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>55</td>\n",
       "      <td>Champions</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5808</th>\n",
       "      <td>18284.0</td>\n",
       "      <td>493</td>\n",
       "      <td>411.680000</td>\n",
       "      <td>0.835051</td>\n",
       "      <td>1</td>\n",
       "      <td>411.68</td>\n",
       "      <td>431</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>Hibernating</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5809</th>\n",
       "      <td>18285.0</td>\n",
       "      <td>144</td>\n",
       "      <td>377.000000</td>\n",
       "      <td>2.618056</td>\n",
       "      <td>1</td>\n",
       "      <td>377.00</td>\n",
       "      <td>660</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>Hibernating</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5810</th>\n",
       "      <td>18286.0</td>\n",
       "      <td>604</td>\n",
       "      <td>585.790000</td>\n",
       "      <td>1.939702</td>\n",
       "      <td>2</td>\n",
       "      <td>1171.58</td>\n",
       "      <td>476</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>13</td>\n",
       "      <td>At_risk</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5811</th>\n",
       "      <td>18287.0</td>\n",
       "      <td>3012</td>\n",
       "      <td>590.427143</td>\n",
       "      <td>1.372175</td>\n",
       "      <td>7</td>\n",
       "      <td>4132.99</td>\n",
       "      <td>42</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>44</td>\n",
       "      <td>Loyal_customers</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5812 rows Ã— 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Customer ID  TotalItemsBought  AvgSpendingPerInvoice  \\\n",
       "0         12346.0                70              33.896364   \n",
       "1         12347.0              2727             583.991250   \n",
       "2         12348.0              2705             331.880000   \n",
       "3         12349.0              1616            1166.313333   \n",
       "4         12350.0               196             294.400000   \n",
       "...           ...               ...                    ...   \n",
       "5807      18283.0              1679             121.131818   \n",
       "5808      18284.0               493             411.680000   \n",
       "5809      18285.0               144             377.000000   \n",
       "5810      18286.0               604             585.790000   \n",
       "5811      18287.0              3012             590.427143   \n",
       "\n",
       "      AvgSpendingPerItem  FrequencyValue  MonetaryValue  RecencyValue  \\\n",
       "0               5.326571              11         372.86           528   \n",
       "1               1.713212               8        4671.93             1   \n",
       "2               0.613457               5        1659.40            74   \n",
       "3               2.165186               3        3498.94            18   \n",
       "4               1.502041               1         294.40           309   \n",
       "...                  ...             ...            ...           ...   \n",
       "5807            1.587195              22        2664.90             3   \n",
       "5808            0.835051               1         411.68           431   \n",
       "5809            2.618056               1         377.00           660   \n",
       "5810            1.939702               2        1171.58           476   \n",
       "5811            1.372175               7        4132.99            42   \n",
       "\n",
       "     Recency_Score Frequency_Score Monetary_Score RF_Score  \\\n",
       "0                1               5              2       15   \n",
       "1                5               4              5       54   \n",
       "2                3               4              4       34   \n",
       "3                5               3              5       53   \n",
       "4                2               1              2       21   \n",
       "...            ...             ...            ...      ...   \n",
       "5807             5               5              4       55   \n",
       "5808             1               2              2       12   \n",
       "5809             1               2              2       12   \n",
       "5810             1               3              4       13   \n",
       "5811             4               4              5       44   \n",
       "\n",
       "              RFM Segment  Cluster  \n",
       "0              Cant-loose        4  \n",
       "1               Champions        0  \n",
       "2         Loyal_customers        0  \n",
       "3     Potential_loyalists        0  \n",
       "4             Hibernating        3  \n",
       "...                   ...      ...  \n",
       "5807            Champions        0  \n",
       "5808          Hibernating        3  \n",
       "5809          Hibernating        3  \n",
       "5810              At_risk        3  \n",
       "5811      Loyal_customers        0  \n",
       "\n",
       "[5812 rows x 13 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "customer_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "105e5479",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:04.688387Z",
     "iopub.status.busy": "2024-09-10T17:11:04.687946Z",
     "iopub.status.idle": "2024-09-10T17:11:04.991067Z",
     "shell.execute_reply": "2024-09-10T17:11:04.990099Z"
    },
    "papermill": {
     "duration": 0.330864,
     "end_time": "2024-09-10T17:11:04.993565",
     "exception": false,
     "start_time": "2024-09-10T17:11:04.662701",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "customer_df.groupby('Cluster').agg({\n",
    "    'TotalItemsBought': ['count', 'mean', 'std', 'min', 'max'],\n",
    "    'AvgSpendingPerInvoice': ['count', 'mean', 'std', 'min', 'max'],\n",
    "    'AvgSpendingPerItem': ['count', 'mean', 'std', 'min', 'max'],\n",
    "    'FrequencyValue': ['count', 'mean', 'std', 'min', 'max'],\n",
    "    'MonetaryValue': ['count', 'mean', 'std', 'min', 'max'],\n",
    "    'RecencyValue': ['count', 'mean', 'std', 'min', 'max']\n",
    "}).to_excel(\"online_retail_cluster_analysis.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "8b8750f6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:05.044299Z",
     "iopub.status.busy": "2024-09-10T17:11:05.043236Z",
     "iopub.status.idle": "2024-09-10T17:11:05.063337Z",
     "shell.execute_reply": "2024-09-10T17:11:05.062345Z"
    },
    "papermill": {
     "duration": 0.047656,
     "end_time": "2024-09-10T17:11:05.065708",
     "exception": false,
     "start_time": "2024-09-10T17:11:05.018052",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Customer ID</th>\n",
       "      <th>TotalItemsBought</th>\n",
       "      <th>AvgSpendingPerInvoice</th>\n",
       "      <th>AvgSpendingPerItem</th>\n",
       "      <th>FrequencyValue</th>\n",
       "      <th>MonetaryValue</th>\n",
       "      <th>RecencyValue</th>\n",
       "      <th>Recency_Score</th>\n",
       "      <th>Frequency_Score</th>\n",
       "      <th>Monetary_Score</th>\n",
       "      <th>RF_Score</th>\n",
       "      <th>RFM Segment</th>\n",
       "      <th>Cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12346.0</td>\n",
       "      <td>70</td>\n",
       "      <td>33.896364</td>\n",
       "      <td>5.326571</td>\n",
       "      <td>11</td>\n",
       "      <td>372.86</td>\n",
       "      <td>528</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>Cant-loose</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12347.0</td>\n",
       "      <td>2727</td>\n",
       "      <td>583.991250</td>\n",
       "      <td>1.713212</td>\n",
       "      <td>8</td>\n",
       "      <td>4671.93</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>54</td>\n",
       "      <td>Champions</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12348.0</td>\n",
       "      <td>2705</td>\n",
       "      <td>331.880000</td>\n",
       "      <td>0.613457</td>\n",
       "      <td>5</td>\n",
       "      <td>1659.40</td>\n",
       "      <td>74</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>34</td>\n",
       "      <td>Loyal_customers</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12349.0</td>\n",
       "      <td>1616</td>\n",
       "      <td>1166.313333</td>\n",
       "      <td>2.165186</td>\n",
       "      <td>3</td>\n",
       "      <td>3498.94</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>53</td>\n",
       "      <td>Potential_loyalists</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12350.0</td>\n",
       "      <td>196</td>\n",
       "      <td>294.400000</td>\n",
       "      <td>1.502041</td>\n",
       "      <td>1</td>\n",
       "      <td>294.40</td>\n",
       "      <td>309</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>21</td>\n",
       "      <td>Hibernating</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5807</th>\n",
       "      <td>18283.0</td>\n",
       "      <td>1679</td>\n",
       "      <td>121.131818</td>\n",
       "      <td>1.587195</td>\n",
       "      <td>22</td>\n",
       "      <td>2664.90</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>55</td>\n",
       "      <td>Champions</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5808</th>\n",
       "      <td>18284.0</td>\n",
       "      <td>493</td>\n",
       "      <td>411.680000</td>\n",
       "      <td>0.835051</td>\n",
       "      <td>1</td>\n",
       "      <td>411.68</td>\n",
       "      <td>431</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>Hibernating</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5809</th>\n",
       "      <td>18285.0</td>\n",
       "      <td>144</td>\n",
       "      <td>377.000000</td>\n",
       "      <td>2.618056</td>\n",
       "      <td>1</td>\n",
       "      <td>377.00</td>\n",
       "      <td>660</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>Hibernating</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5810</th>\n",
       "      <td>18286.0</td>\n",
       "      <td>604</td>\n",
       "      <td>585.790000</td>\n",
       "      <td>1.939702</td>\n",
       "      <td>2</td>\n",
       "      <td>1171.58</td>\n",
       "      <td>476</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>13</td>\n",
       "      <td>At_risk</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5811</th>\n",
       "      <td>18287.0</td>\n",
       "      <td>3012</td>\n",
       "      <td>590.427143</td>\n",
       "      <td>1.372175</td>\n",
       "      <td>7</td>\n",
       "      <td>4132.99</td>\n",
       "      <td>42</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>44</td>\n",
       "      <td>Loyal_customers</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5812 rows Ã— 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Customer ID  TotalItemsBought  AvgSpendingPerInvoice  \\\n",
       "0         12346.0                70              33.896364   \n",
       "1         12347.0              2727             583.991250   \n",
       "2         12348.0              2705             331.880000   \n",
       "3         12349.0              1616            1166.313333   \n",
       "4         12350.0               196             294.400000   \n",
       "...           ...               ...                    ...   \n",
       "5807      18283.0              1679             121.131818   \n",
       "5808      18284.0               493             411.680000   \n",
       "5809      18285.0               144             377.000000   \n",
       "5810      18286.0               604             585.790000   \n",
       "5811      18287.0              3012             590.427143   \n",
       "\n",
       "      AvgSpendingPerItem  FrequencyValue  MonetaryValue  RecencyValue  \\\n",
       "0               5.326571              11         372.86           528   \n",
       "1               1.713212               8        4671.93             1   \n",
       "2               0.613457               5        1659.40            74   \n",
       "3               2.165186               3        3498.94            18   \n",
       "4               1.502041               1         294.40           309   \n",
       "...                  ...             ...            ...           ...   \n",
       "5807            1.587195              22        2664.90             3   \n",
       "5808            0.835051               1         411.68           431   \n",
       "5809            2.618056               1         377.00           660   \n",
       "5810            1.939702               2        1171.58           476   \n",
       "5811            1.372175               7        4132.99            42   \n",
       "\n",
       "     Recency_Score Frequency_Score Monetary_Score RF_Score  \\\n",
       "0                1               5              2       15   \n",
       "1                5               4              5       54   \n",
       "2                3               4              4       34   \n",
       "3                5               3              5       53   \n",
       "4                2               1              2       21   \n",
       "...            ...             ...            ...      ...   \n",
       "5807             5               5              4       55   \n",
       "5808             1               2              2       12   \n",
       "5809             1               2              2       12   \n",
       "5810             1               3              4       13   \n",
       "5811             4               4              5       44   \n",
       "\n",
       "              RFM Segment  Cluster  \n",
       "0              Cant-loose        4  \n",
       "1               Champions        0  \n",
       "2         Loyal_customers        0  \n",
       "3     Potential_loyalists        0  \n",
       "4             Hibernating        3  \n",
       "...                   ...      ...  \n",
       "5807            Champions        0  \n",
       "5808          Hibernating        3  \n",
       "5809          Hibernating        3  \n",
       "5810              At_risk        3  \n",
       "5811      Loyal_customers        0  \n",
       "\n",
       "[5812 rows x 13 columns]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "customer_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "c850db7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:05.117212Z",
     "iopub.status.busy": "2024-09-10T17:11:05.116406Z",
     "iopub.status.idle": "2024-09-10T17:11:05.126834Z",
     "shell.execute_reply": "2024-09-10T17:11:05.125843Z"
    },
    "papermill": {
     "duration": 0.038486,
     "end_time": "2024-09-10T17:11:05.128913",
     "exception": false,
     "start_time": "2024-09-10T17:11:05.090427",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Set the aesthetic style of the plots\n",
    "sns.set_style(\"whitegrid\")\n",
    "\n",
    "\n",
    "cluster_means = customer_df.groupby('Cluster').agg({\n",
    "    'RecencyValue': 'mean',\n",
    "    'FrequencyValue': 'mean',\n",
    "    'MonetaryValue': 'mean',\n",
    "    'TotalItemsBought': 'mean',\n",
    "    'AvgSpendingPerInvoice': 'mean',\n",
    "    'AvgSpendingPerItem': 'mean'\n",
    "}).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "a6998ba4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:05.179397Z",
     "iopub.status.busy": "2024-09-10T17:11:05.178961Z",
     "iopub.status.idle": "2024-09-10T17:11:05.191664Z",
     "shell.execute_reply": "2024-09-10T17:11:05.190718Z"
    },
    "papermill": {
     "duration": 0.040231,
     "end_time": "2024-09-10T17:11:05.193679",
     "exception": false,
     "start_time": "2024-09-10T17:11:05.153448",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cluster</th>\n",
       "      <th>RecencyValue</th>\n",
       "      <th>FrequencyValue</th>\n",
       "      <th>MonetaryValue</th>\n",
       "      <th>TotalItemsBought</th>\n",
       "      <th>AvgSpendingPerInvoice</th>\n",
       "      <th>AvgSpendingPerItem</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>67.840863</td>\n",
       "      <td>5.959196</td>\n",
       "      <td>1889.455948</td>\n",
       "      <td>1112.580880</td>\n",
       "      <td>321.392000</td>\n",
       "      <td>1.818573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2.153846</td>\n",
       "      <td>168.076923</td>\n",
       "      <td>135509.600769</td>\n",
       "      <td>78688.538462</td>\n",
       "      <td>1025.504359</td>\n",
       "      <td>1.772433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>51.529801</td>\n",
       "      <td>28.718543</td>\n",
       "      <td>15437.694788</td>\n",
       "      <td>7945.831126</td>\n",
       "      <td>900.565293</td>\n",
       "      <td>2.004155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>461.625000</td>\n",
       "      <td>2.222159</td>\n",
       "      <td>616.996467</td>\n",
       "      <td>357.694318</td>\n",
       "      <td>277.976900</td>\n",
       "      <td>1.887006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>320.764706</td>\n",
       "      <td>2.624183</td>\n",
       "      <td>664.313239</td>\n",
       "      <td>136.401961</td>\n",
       "      <td>244.457373</td>\n",
       "      <td>5.436559</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Cluster  RecencyValue  FrequencyValue  MonetaryValue  TotalItemsBought  \\\n",
       "0        0     67.840863        5.959196    1889.455948       1112.580880   \n",
       "1        1      2.153846      168.076923  135509.600769      78688.538462   \n",
       "2        2     51.529801       28.718543   15437.694788       7945.831126   \n",
       "3        3    461.625000        2.222159     616.996467        357.694318   \n",
       "4        4    320.764706        2.624183     664.313239        136.401961   \n",
       "\n",
       "   AvgSpendingPerInvoice  AvgSpendingPerItem  \n",
       "0             321.392000            1.818573  \n",
       "1            1025.504359            1.772433  \n",
       "2             900.565293            2.004155  \n",
       "3             277.976900            1.887006  \n",
       "4             244.457373            5.436559  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster_means"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "f220d561",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:05.246590Z",
     "iopub.status.busy": "2024-09-10T17:11:05.245612Z",
     "iopub.status.idle": "2024-09-10T17:11:05.528228Z",
     "shell.execute_reply": "2024-09-10T17:11:05.527227Z"
    },
    "papermill": {
     "duration": 0.31101,
     "end_time": "2024-09-10T17:11:05.530401",
     "exception": false,
     "start_time": "2024-09-10T17:11:05.219391",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(x='Cluster', y='RecencyValue', data=cluster_means, palette='viridis')\n",
    "plt.title('Average Recency Value by Cluster')\n",
    "plt.xlabel('Cluster')\n",
    "plt.ylabel('Average Recency')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "6d42154d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:05.582777Z",
     "iopub.status.busy": "2024-09-10T17:11:05.582359Z",
     "iopub.status.idle": "2024-09-10T17:11:05.883399Z",
     "shell.execute_reply": "2024-09-10T17:11:05.882344Z"
    },
    "papermill": {
     "duration": 0.330299,
     "end_time": "2024-09-10T17:11:05.885838",
     "exception": false,
     "start_time": "2024-09-10T17:11:05.555539",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(x='Cluster', y='FrequencyValue', data=cluster_means, palette='viridis')\n",
    "plt.title('Average Frequency Value by Cluster')\n",
    "plt.xlabel('Cluster')\n",
    "plt.ylabel('Average Frequency')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "9e7489b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:05.939319Z",
     "iopub.status.busy": "2024-09-10T17:11:05.938827Z",
     "iopub.status.idle": "2024-09-10T17:11:06.236448Z",
     "shell.execute_reply": "2024-09-10T17:11:06.235318Z"
    },
    "papermill": {
     "duration": 0.326997,
     "end_time": "2024-09-10T17:11:06.238893",
     "exception": false,
     "start_time": "2024-09-10T17:11:05.911896",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(x='Cluster', y='MonetaryValue', data=cluster_means, palette='viridis')\n",
    "plt.title('Average Monetary Value by Cluster')\n",
    "plt.xlabel('Cluster')\n",
    "plt.ylabel('Average Monetary')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "e3a8d8af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:06.293471Z",
     "iopub.status.busy": "2024-09-10T17:11:06.293023Z",
     "iopub.status.idle": "2024-09-10T17:11:06.601452Z",
     "shell.execute_reply": "2024-09-10T17:11:06.600395Z"
    },
    "papermill": {
     "duration": 0.337964,
     "end_time": "2024-09-10T17:11:06.603522",
     "exception": false,
     "start_time": "2024-09-10T17:11:06.265558",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(x='Cluster', y='TotalItemsBought', data=cluster_means, palette='viridis')\n",
    "plt.title('Average Total Items Bought by Cluster')\n",
    "plt.xlabel('Cluster')\n",
    "plt.ylabel('Average Items Bought')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "8969ab35",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:06.658830Z",
     "iopub.status.busy": "2024-09-10T17:11:06.658409Z",
     "iopub.status.idle": "2024-09-10T17:11:06.947130Z",
     "shell.execute_reply": "2024-09-10T17:11:06.946102Z"
    },
    "papermill": {
     "duration": 0.319337,
     "end_time": "2024-09-10T17:11:06.949554",
     "exception": false,
     "start_time": "2024-09-10T17:11:06.630217",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(x='Cluster', y='AvgSpendingPerInvoice', data=cluster_means, palette='viridis')\n",
    "plt.title('Average Spending Per Invoice by Cluster')\n",
    "plt.xlabel('Cluster')\n",
    "plt.ylabel('Average Spending Per Invoice')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "8f501f68",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:07.005974Z",
     "iopub.status.busy": "2024-09-10T17:11:07.005233Z",
     "iopub.status.idle": "2024-09-10T17:11:07.026425Z",
     "shell.execute_reply": "2024-09-10T17:11:07.025436Z"
    },
    "papermill": {
     "duration": 0.052015,
     "end_time": "2024-09-10T17:11:07.028624",
     "exception": false,
     "start_time": "2024-09-10T17:11:06.976609",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Customer ID</th>\n",
       "      <th>TotalItemsBought</th>\n",
       "      <th>AvgSpendingPerInvoice</th>\n",
       "      <th>AvgSpendingPerItem</th>\n",
       "      <th>FrequencyValue</th>\n",
       "      <th>MonetaryValue</th>\n",
       "      <th>RecencyValue</th>\n",
       "      <th>Recency_Score</th>\n",
       "      <th>Frequency_Score</th>\n",
       "      <th>Monetary_Score</th>\n",
       "      <th>RF_Score</th>\n",
       "      <th>RFM Segment</th>\n",
       "      <th>Cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12346.0</td>\n",
       "      <td>70</td>\n",
       "      <td>33.896364</td>\n",
       "      <td>5.326571</td>\n",
       "      <td>11</td>\n",
       "      <td>372.86</td>\n",
       "      <td>528</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>Cant-loose</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12347.0</td>\n",
       "      <td>2727</td>\n",
       "      <td>583.991250</td>\n",
       "      <td>1.713212</td>\n",
       "      <td>8</td>\n",
       "      <td>4671.93</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>54</td>\n",
       "      <td>Champions</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12348.0</td>\n",
       "      <td>2705</td>\n",
       "      <td>331.880000</td>\n",
       "      <td>0.613457</td>\n",
       "      <td>5</td>\n",
       "      <td>1659.40</td>\n",
       "      <td>74</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>34</td>\n",
       "      <td>Loyal_customers</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12349.0</td>\n",
       "      <td>1616</td>\n",
       "      <td>1166.313333</td>\n",
       "      <td>2.165186</td>\n",
       "      <td>3</td>\n",
       "      <td>3498.94</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>53</td>\n",
       "      <td>Potential_loyalists</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12350.0</td>\n",
       "      <td>196</td>\n",
       "      <td>294.400000</td>\n",
       "      <td>1.502041</td>\n",
       "      <td>1</td>\n",
       "      <td>294.40</td>\n",
       "      <td>309</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>21</td>\n",
       "      <td>Hibernating</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5807</th>\n",
       "      <td>18283.0</td>\n",
       "      <td>1679</td>\n",
       "      <td>121.131818</td>\n",
       "      <td>1.587195</td>\n",
       "      <td>22</td>\n",
       "      <td>2664.90</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>55</td>\n",
       "      <td>Champions</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5808</th>\n",
       "      <td>18284.0</td>\n",
       "      <td>493</td>\n",
       "      <td>411.680000</td>\n",
       "      <td>0.835051</td>\n",
       "      <td>1</td>\n",
       "      <td>411.68</td>\n",
       "      <td>431</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>Hibernating</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5809</th>\n",
       "      <td>18285.0</td>\n",
       "      <td>144</td>\n",
       "      <td>377.000000</td>\n",
       "      <td>2.618056</td>\n",
       "      <td>1</td>\n",
       "      <td>377.00</td>\n",
       "      <td>660</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>Hibernating</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5810</th>\n",
       "      <td>18286.0</td>\n",
       "      <td>604</td>\n",
       "      <td>585.790000</td>\n",
       "      <td>1.939702</td>\n",
       "      <td>2</td>\n",
       "      <td>1171.58</td>\n",
       "      <td>476</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>13</td>\n",
       "      <td>At_risk</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5811</th>\n",
       "      <td>18287.0</td>\n",
       "      <td>3012</td>\n",
       "      <td>590.427143</td>\n",
       "      <td>1.372175</td>\n",
       "      <td>7</td>\n",
       "      <td>4132.99</td>\n",
       "      <td>42</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>44</td>\n",
       "      <td>Loyal_customers</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5812 rows Ã— 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Customer ID  TotalItemsBought  AvgSpendingPerInvoice  \\\n",
       "0         12346.0                70              33.896364   \n",
       "1         12347.0              2727             583.991250   \n",
       "2         12348.0              2705             331.880000   \n",
       "3         12349.0              1616            1166.313333   \n",
       "4         12350.0               196             294.400000   \n",
       "...           ...               ...                    ...   \n",
       "5807      18283.0              1679             121.131818   \n",
       "5808      18284.0               493             411.680000   \n",
       "5809      18285.0               144             377.000000   \n",
       "5810      18286.0               604             585.790000   \n",
       "5811      18287.0              3012             590.427143   \n",
       "\n",
       "      AvgSpendingPerItem  FrequencyValue  MonetaryValue  RecencyValue  \\\n",
       "0               5.326571              11         372.86           528   \n",
       "1               1.713212               8        4671.93             1   \n",
       "2               0.613457               5        1659.40            74   \n",
       "3               2.165186               3        3498.94            18   \n",
       "4               1.502041               1         294.40           309   \n",
       "...                  ...             ...            ...           ...   \n",
       "5807            1.587195              22        2664.90             3   \n",
       "5808            0.835051               1         411.68           431   \n",
       "5809            2.618056               1         377.00           660   \n",
       "5810            1.939702               2        1171.58           476   \n",
       "5811            1.372175               7        4132.99            42   \n",
       "\n",
       "     Recency_Score Frequency_Score Monetary_Score RF_Score  \\\n",
       "0                1               5              2       15   \n",
       "1                5               4              5       54   \n",
       "2                3               4              4       34   \n",
       "3                5               3              5       53   \n",
       "4                2               1              2       21   \n",
       "...            ...             ...            ...      ...   \n",
       "5807             5               5              4       55   \n",
       "5808             1               2              2       12   \n",
       "5809             1               2              2       12   \n",
       "5810             1               3              4       13   \n",
       "5811             4               4              5       44   \n",
       "\n",
       "              RFM Segment  Cluster  \n",
       "0              Cant-loose        4  \n",
       "1               Champions        0  \n",
       "2         Loyal_customers        0  \n",
       "3     Potential_loyalists        0  \n",
       "4             Hibernating        3  \n",
       "...                   ...      ...  \n",
       "5807            Champions        0  \n",
       "5808          Hibernating        3  \n",
       "5809          Hibernating        3  \n",
       "5810              At_risk        3  \n",
       "5811      Loyal_customers        0  \n",
       "\n",
       "[5812 rows x 13 columns]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "customer_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "673b7b8b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:07.085307Z",
     "iopub.status.busy": "2024-09-10T17:11:07.084571Z",
     "iopub.status.idle": "2024-09-10T17:11:07.100066Z",
     "shell.execute_reply": "2024-09-10T17:11:07.099014Z"
    },
    "papermill": {
     "duration": 0.046311,
     "end_time": "2024-09-10T17:11:07.102435",
     "exception": false,
     "start_time": "2024-09-10T17:11:07.056124",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5812 entries, 0 to 5811\n",
      "Data columns (total 13 columns):\n",
      " #   Column                 Non-Null Count  Dtype   \n",
      "---  ------                 --------------  -----   \n",
      " 0   Customer ID            5812 non-null   float64 \n",
      " 1   TotalItemsBought       5812 non-null   int64   \n",
      " 2   AvgSpendingPerInvoice  5812 non-null   float64 \n",
      " 3   AvgSpendingPerItem     5812 non-null   float64 \n",
      " 4   FrequencyValue         5812 non-null   int64   \n",
      " 5   MonetaryValue          5812 non-null   float64 \n",
      " 6   RecencyValue           5812 non-null   int64   \n",
      " 7   Recency_Score          5812 non-null   category\n",
      " 8   Frequency_Score        5812 non-null   category\n",
      " 9   Monetary_Score         5812 non-null   category\n",
      " 10  RF_Score               5812 non-null   object  \n",
      " 11  RFM Segment            5812 non-null   object  \n",
      " 12  Cluster                5812 non-null   int32   \n",
      "dtypes: category(3), float64(4), int32(1), int64(3), object(2)\n",
      "memory usage: 449.1+ KB\n"
     ]
    }
   ],
   "source": [
    "customer_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "c7e17527",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:07.159680Z",
     "iopub.status.busy": "2024-09-10T17:11:07.159208Z",
     "iopub.status.idle": "2024-09-10T17:11:07.183988Z",
     "shell.execute_reply": "2024-09-10T17:11:07.182937Z"
    },
    "papermill": {
     "duration": 0.05579,
     "end_time": "2024-09-10T17:11:07.186052",
     "exception": false,
     "start_time": "2024-09-10T17:11:07.130262",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Invoice</th>\n",
       "      <th>StockCode</th>\n",
       "      <th>Description</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>InvoiceDate</th>\n",
       "      <th>Price</th>\n",
       "      <th>Customer ID</th>\n",
       "      <th>Country</th>\n",
       "      <th>Dates</th>\n",
       "      <th>Year</th>\n",
       "      <th>Months</th>\n",
       "      <th>Time_hour</th>\n",
       "      <th>year_month</th>\n",
       "      <th>day</th>\n",
       "      <th>Total Amount Spent</th>\n",
       "      <th>PurchaseTime</th>\n",
       "      <th>TotalAmountSpent</th>\n",
       "      <th>Outlier</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>489434</td>\n",
       "      <td>85048</td>\n",
       "      <td>15CM CHRISTMAS GLASS BALL 20 LIGHTS</td>\n",
       "      <td>12</td>\n",
       "      <td>2009-12-01 07:45:00</td>\n",
       "      <td>6.95</td>\n",
       "      <td>13085.0</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>2009-12-01</td>\n",
       "      <td>2009</td>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "      <td>2009.12</td>\n",
       "      <td>2</td>\n",
       "      <td>83.40</td>\n",
       "      <td>morning</td>\n",
       "      <td>83.40</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>489434</td>\n",
       "      <td>79323P</td>\n",
       "      <td>PINK CHERRY LIGHTS</td>\n",
       "      <td>12</td>\n",
       "      <td>2009-12-01 07:45:00</td>\n",
       "      <td>6.75</td>\n",
       "      <td>13085.0</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>2009-12-01</td>\n",
       "      <td>2009</td>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "      <td>2009.12</td>\n",
       "      <td>2</td>\n",
       "      <td>81.00</td>\n",
       "      <td>morning</td>\n",
       "      <td>81.00</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>489434</td>\n",
       "      <td>79323W</td>\n",
       "      <td>WHITE CHERRY LIGHTS</td>\n",
       "      <td>12</td>\n",
       "      <td>2009-12-01 07:45:00</td>\n",
       "      <td>6.75</td>\n",
       "      <td>13085.0</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>2009-12-01</td>\n",
       "      <td>2009</td>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "      <td>2009.12</td>\n",
       "      <td>2</td>\n",
       "      <td>81.00</td>\n",
       "      <td>morning</td>\n",
       "      <td>81.00</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>489434</td>\n",
       "      <td>22041</td>\n",
       "      <td>RECORD FRAME 7\" SINGLE SIZE</td>\n",
       "      <td>48</td>\n",
       "      <td>2009-12-01 07:45:00</td>\n",
       "      <td>2.10</td>\n",
       "      <td>13085.0</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>2009-12-01</td>\n",
       "      <td>2009</td>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "      <td>2009.12</td>\n",
       "      <td>2</td>\n",
       "      <td>100.80</td>\n",
       "      <td>morning</td>\n",
       "      <td>100.80</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>489434</td>\n",
       "      <td>21232</td>\n",
       "      <td>STRAWBERRY CERAMIC TRINKET BOX</td>\n",
       "      <td>24</td>\n",
       "      <td>2009-12-01 07:45:00</td>\n",
       "      <td>1.25</td>\n",
       "      <td>13085.0</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>2009-12-01</td>\n",
       "      <td>2009</td>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "      <td>2009.12</td>\n",
       "      <td>2</td>\n",
       "      <td>30.00</td>\n",
       "      <td>morning</td>\n",
       "      <td>30.00</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>771703</th>\n",
       "      <td>581587</td>\n",
       "      <td>22899</td>\n",
       "      <td>CHILDREN'S APRON DOLLY GIRL</td>\n",
       "      <td>6</td>\n",
       "      <td>2011-12-09 12:50:00</td>\n",
       "      <td>2.10</td>\n",
       "      <td>12680.0</td>\n",
       "      <td>France</td>\n",
       "      <td>2011-12-09</td>\n",
       "      <td>2011</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>2011.12</td>\n",
       "      <td>5</td>\n",
       "      <td>12.60</td>\n",
       "      <td>afternoon</td>\n",
       "      <td>12.60</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>771704</th>\n",
       "      <td>581587</td>\n",
       "      <td>23254</td>\n",
       "      <td>CHILDRENS CUTLERY DOLLY GIRL</td>\n",
       "      <td>4</td>\n",
       "      <td>2011-12-09 12:50:00</td>\n",
       "      <td>4.15</td>\n",
       "      <td>12680.0</td>\n",
       "      <td>France</td>\n",
       "      <td>2011-12-09</td>\n",
       "      <td>2011</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>2011.12</td>\n",
       "      <td>5</td>\n",
       "      <td>16.60</td>\n",
       "      <td>afternoon</td>\n",
       "      <td>16.60</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>771705</th>\n",
       "      <td>581587</td>\n",
       "      <td>23255</td>\n",
       "      <td>CHILDRENS CUTLERY CIRCUS PARADE</td>\n",
       "      <td>4</td>\n",
       "      <td>2011-12-09 12:50:00</td>\n",
       "      <td>4.15</td>\n",
       "      <td>12680.0</td>\n",
       "      <td>France</td>\n",
       "      <td>2011-12-09</td>\n",
       "      <td>2011</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>2011.12</td>\n",
       "      <td>5</td>\n",
       "      <td>16.60</td>\n",
       "      <td>afternoon</td>\n",
       "      <td>16.60</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>771706</th>\n",
       "      <td>581587</td>\n",
       "      <td>22138</td>\n",
       "      <td>BAKING SET 9 PIECE RETROSPOT</td>\n",
       "      <td>3</td>\n",
       "      <td>2011-12-09 12:50:00</td>\n",
       "      <td>4.95</td>\n",
       "      <td>12680.0</td>\n",
       "      <td>France</td>\n",
       "      <td>2011-12-09</td>\n",
       "      <td>2011</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>2011.12</td>\n",
       "      <td>5</td>\n",
       "      <td>14.85</td>\n",
       "      <td>afternoon</td>\n",
       "      <td>14.85</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>771707</th>\n",
       "      <td>581587</td>\n",
       "      <td>POST</td>\n",
       "      <td>POSTAGE</td>\n",
       "      <td>1</td>\n",
       "      <td>2011-12-09 12:50:00</td>\n",
       "      <td>18.00</td>\n",
       "      <td>12680.0</td>\n",
       "      <td>France</td>\n",
       "      <td>2011-12-09</td>\n",
       "      <td>2011</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>2011.12</td>\n",
       "      <td>5</td>\n",
       "      <td>18.00</td>\n",
       "      <td>afternoon</td>\n",
       "      <td>18.00</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>771708 rows Ã— 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Invoice StockCode                          Description  Quantity  \\\n",
       "0       489434     85048  15CM CHRISTMAS GLASS BALL 20 LIGHTS        12   \n",
       "1       489434    79323P                   PINK CHERRY LIGHTS        12   \n",
       "2       489434    79323W                  WHITE CHERRY LIGHTS        12   \n",
       "3       489434     22041         RECORD FRAME 7\" SINGLE SIZE         48   \n",
       "4       489434     21232       STRAWBERRY CERAMIC TRINKET BOX        24   \n",
       "...        ...       ...                                  ...       ...   \n",
       "771703  581587     22899         CHILDREN'S APRON DOLLY GIRL          6   \n",
       "771704  581587     23254        CHILDRENS CUTLERY DOLLY GIRL          4   \n",
       "771705  581587     23255      CHILDRENS CUTLERY CIRCUS PARADE         4   \n",
       "771706  581587     22138        BAKING SET 9 PIECE RETROSPOT          3   \n",
       "771707  581587      POST                              POSTAGE         1   \n",
       "\n",
       "               InvoiceDate  Price  Customer ID         Country       Dates  \\\n",
       "0      2009-12-01 07:45:00   6.95      13085.0  United Kingdom  2009-12-01   \n",
       "1      2009-12-01 07:45:00   6.75      13085.0  United Kingdom  2009-12-01   \n",
       "2      2009-12-01 07:45:00   6.75      13085.0  United Kingdom  2009-12-01   \n",
       "3      2009-12-01 07:45:00   2.10      13085.0  United Kingdom  2009-12-01   \n",
       "4      2009-12-01 07:45:00   1.25      13085.0  United Kingdom  2009-12-01   \n",
       "...                    ...    ...          ...             ...         ...   \n",
       "771703 2011-12-09 12:50:00   2.10      12680.0          France  2011-12-09   \n",
       "771704 2011-12-09 12:50:00   4.15      12680.0          France  2011-12-09   \n",
       "771705 2011-12-09 12:50:00   4.15      12680.0          France  2011-12-09   \n",
       "771706 2011-12-09 12:50:00   4.95      12680.0          France  2011-12-09   \n",
       "771707 2011-12-09 12:50:00  18.00      12680.0          France  2011-12-09   \n",
       "\n",
       "        Year  Months  Time_hour year_month  day  Total Amount Spent  \\\n",
       "0       2009      12          7    2009.12    2               83.40   \n",
       "1       2009      12          7    2009.12    2               81.00   \n",
       "2       2009      12          7    2009.12    2               81.00   \n",
       "3       2009      12          7    2009.12    2              100.80   \n",
       "4       2009      12          7    2009.12    2               30.00   \n",
       "...      ...     ...        ...        ...  ...                 ...   \n",
       "771703  2011      12         12    2011.12    5               12.60   \n",
       "771704  2011      12         12    2011.12    5               16.60   \n",
       "771705  2011      12         12    2011.12    5               16.60   \n",
       "771706  2011      12         12    2011.12    5               14.85   \n",
       "771707  2011      12         12    2011.12    5               18.00   \n",
       "\n",
       "       PurchaseTime  TotalAmountSpent Outlier  \n",
       "0           morning             83.40      No  \n",
       "1           morning             81.00      No  \n",
       "2           morning             81.00      No  \n",
       "3           morning            100.80      No  \n",
       "4           morning             30.00      No  \n",
       "...             ...               ...     ...  \n",
       "771703    afternoon             12.60      No  \n",
       "771704    afternoon             16.60      No  \n",
       "771705    afternoon             16.60      No  \n",
       "771706    afternoon             14.85      No  \n",
       "771707    afternoon             18.00      No  \n",
       "\n",
       "[771708 rows x 18 columns]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "72db808d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:07.243860Z",
     "iopub.status.busy": "2024-09-10T17:11:07.243433Z",
     "iopub.status.idle": "2024-09-10T17:11:07.276047Z",
     "shell.execute_reply": "2024-09-10T17:11:07.274942Z"
    },
    "papermill": {
     "duration": 0.064263,
     "end_time": "2024-09-10T17:11:07.278385",
     "exception": false,
     "start_time": "2024-09-10T17:11:07.214122",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2009, 2010, 2011], dtype=int32)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"InvoiceDate\"].dt.year.unique()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "db0aa840",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:07.339249Z",
     "iopub.status.busy": "2024-09-10T17:11:07.338267Z",
     "iopub.status.idle": "2024-09-10T17:11:07.358499Z",
     "shell.execute_reply": "2024-09-10T17:11:07.357459Z"
    },
    "papermill": {
     "duration": 0.053677,
     "end_time": "2024-09-10T17:11:07.360645",
     "exception": false,
     "start_time": "2024-09-10T17:11:07.306968",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Customer ID</th>\n",
       "      <th>TotalItemsBought</th>\n",
       "      <th>AvgSpendingPerInvoice</th>\n",
       "      <th>AvgSpendingPerItem</th>\n",
       "      <th>FrequencyValue</th>\n",
       "      <th>MonetaryValue</th>\n",
       "      <th>RecencyValue</th>\n",
       "      <th>Recency_Score</th>\n",
       "      <th>Frequency_Score</th>\n",
       "      <th>Monetary_Score</th>\n",
       "      <th>RF_Score</th>\n",
       "      <th>RFM Segment</th>\n",
       "      <th>Cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12346.0</td>\n",
       "      <td>70</td>\n",
       "      <td>33.896364</td>\n",
       "      <td>5.326571</td>\n",
       "      <td>11</td>\n",
       "      <td>372.86</td>\n",
       "      <td>528</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>Cant-loose</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12347.0</td>\n",
       "      <td>2727</td>\n",
       "      <td>583.991250</td>\n",
       "      <td>1.713212</td>\n",
       "      <td>8</td>\n",
       "      <td>4671.93</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>54</td>\n",
       "      <td>Champions</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12348.0</td>\n",
       "      <td>2705</td>\n",
       "      <td>331.880000</td>\n",
       "      <td>0.613457</td>\n",
       "      <td>5</td>\n",
       "      <td>1659.40</td>\n",
       "      <td>74</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>34</td>\n",
       "      <td>Loyal_customers</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12349.0</td>\n",
       "      <td>1616</td>\n",
       "      <td>1166.313333</td>\n",
       "      <td>2.165186</td>\n",
       "      <td>3</td>\n",
       "      <td>3498.94</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>53</td>\n",
       "      <td>Potential_loyalists</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12350.0</td>\n",
       "      <td>196</td>\n",
       "      <td>294.400000</td>\n",
       "      <td>1.502041</td>\n",
       "      <td>1</td>\n",
       "      <td>294.40</td>\n",
       "      <td>309</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>21</td>\n",
       "      <td>Hibernating</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5807</th>\n",
       "      <td>18283.0</td>\n",
       "      <td>1679</td>\n",
       "      <td>121.131818</td>\n",
       "      <td>1.587195</td>\n",
       "      <td>22</td>\n",
       "      <td>2664.90</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>55</td>\n",
       "      <td>Champions</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5808</th>\n",
       "      <td>18284.0</td>\n",
       "      <td>493</td>\n",
       "      <td>411.680000</td>\n",
       "      <td>0.835051</td>\n",
       "      <td>1</td>\n",
       "      <td>411.68</td>\n",
       "      <td>431</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>Hibernating</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5809</th>\n",
       "      <td>18285.0</td>\n",
       "      <td>144</td>\n",
       "      <td>377.000000</td>\n",
       "      <td>2.618056</td>\n",
       "      <td>1</td>\n",
       "      <td>377.00</td>\n",
       "      <td>660</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>Hibernating</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5810</th>\n",
       "      <td>18286.0</td>\n",
       "      <td>604</td>\n",
       "      <td>585.790000</td>\n",
       "      <td>1.939702</td>\n",
       "      <td>2</td>\n",
       "      <td>1171.58</td>\n",
       "      <td>476</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>13</td>\n",
       "      <td>At_risk</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5811</th>\n",
       "      <td>18287.0</td>\n",
       "      <td>3012</td>\n",
       "      <td>590.427143</td>\n",
       "      <td>1.372175</td>\n",
       "      <td>7</td>\n",
       "      <td>4132.99</td>\n",
       "      <td>42</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>44</td>\n",
       "      <td>Loyal_customers</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5812 rows Ã— 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Customer ID  TotalItemsBought  AvgSpendingPerInvoice  \\\n",
       "0         12346.0                70              33.896364   \n",
       "1         12347.0              2727             583.991250   \n",
       "2         12348.0              2705             331.880000   \n",
       "3         12349.0              1616            1166.313333   \n",
       "4         12350.0               196             294.400000   \n",
       "...           ...               ...                    ...   \n",
       "5807      18283.0              1679             121.131818   \n",
       "5808      18284.0               493             411.680000   \n",
       "5809      18285.0               144             377.000000   \n",
       "5810      18286.0               604             585.790000   \n",
       "5811      18287.0              3012             590.427143   \n",
       "\n",
       "      AvgSpendingPerItem  FrequencyValue  MonetaryValue  RecencyValue  \\\n",
       "0               5.326571              11         372.86           528   \n",
       "1               1.713212               8        4671.93             1   \n",
       "2               0.613457               5        1659.40            74   \n",
       "3               2.165186               3        3498.94            18   \n",
       "4               1.502041               1         294.40           309   \n",
       "...                  ...             ...            ...           ...   \n",
       "5807            1.587195              22        2664.90             3   \n",
       "5808            0.835051               1         411.68           431   \n",
       "5809            2.618056               1         377.00           660   \n",
       "5810            1.939702               2        1171.58           476   \n",
       "5811            1.372175               7        4132.99            42   \n",
       "\n",
       "     Recency_Score Frequency_Score Monetary_Score RF_Score  \\\n",
       "0                1               5              2       15   \n",
       "1                5               4              5       54   \n",
       "2                3               4              4       34   \n",
       "3                5               3              5       53   \n",
       "4                2               1              2       21   \n",
       "...            ...             ...            ...      ...   \n",
       "5807             5               5              4       55   \n",
       "5808             1               2              2       12   \n",
       "5809             1               2              2       12   \n",
       "5810             1               3              4       13   \n",
       "5811             4               4              5       44   \n",
       "\n",
       "              RFM Segment  Cluster  \n",
       "0              Cant-loose        4  \n",
       "1               Champions        0  \n",
       "2         Loyal_customers        0  \n",
       "3     Potential_loyalists        0  \n",
       "4             Hibernating        3  \n",
       "...                   ...      ...  \n",
       "5807            Champions        0  \n",
       "5808          Hibernating        3  \n",
       "5809          Hibernating        3  \n",
       "5810              At_risk        3  \n",
       "5811      Loyal_customers        0  \n",
       "\n",
       "[5812 rows x 13 columns]"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "customer_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d4841f8",
   "metadata": {
    "papermill": {
     "duration": 0.0282,
     "end_time": "2024-09-10T17:11:07.418345",
     "exception": false,
     "start_time": "2024-09-10T17:11:07.390145",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 4- Association Rule mining - Apriori\n",
    "In this part, we split our data as train and test split, based on the date. Firstly, we will train our data with earlier transactions. And after that, we will test if the recommended products were really bought by the customers in the test part.\n",
    "The distrubition is based on having 70% of the transactions in the train dataset. This gives us these dates on the below output.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8c06d3a",
   "metadata": {
    "papermill": {
     "duration": 0.028318,
     "end_time": "2024-09-10T17:11:07.475084",
     "exception": false,
     "start_time": "2024-09-10T17:11:07.446766",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The distrubition is based on having 70% of the transactions in the train dataset. This gives us these dates on the below output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "7ba6c2b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:07.542078Z",
     "iopub.status.busy": "2024-09-10T17:11:07.541419Z",
     "iopub.status.idle": "2024-09-10T17:11:07.762845Z",
     "shell.execute_reply": "2024-09-10T17:11:07.761722Z"
    },
    "papermill": {
     "duration": 0.261693,
     "end_time": "2024-09-10T17:11:07.765092",
     "exception": false,
     "start_time": "2024-09-10T17:11:07.503399",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((Timestamp('2009-12-01 07:45:00'), Timestamp('2011-06-16 17:04:00')),\n",
       " (Timestamp('2011-06-16 17:04:00'), Timestamp('2011-12-09 12:50:00')))"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Sort df by InvoiceDate\n",
    "df_sorted = df.sort_values('InvoiceDate')\n",
    "\n",
    "# Calculate the index to split on - 70% for training\n",
    "split_idx = int(len(df_sorted) * 0.7)\n",
    "\n",
    "# Create the train and test datasets\n",
    "train_df = df_sorted[:split_idx]\n",
    "test_df = df_sorted[split_idx:]\n",
    "\n",
    "# Check the date range for train and test sets\n",
    "train_date_range = (train_df['InvoiceDate'].min(), train_df['InvoiceDate'].max())\n",
    "test_date_range = (test_df['InvoiceDate'].min(), test_df['InvoiceDate'].max())\n",
    "\n",
    "# Output the date range to confirm the split\n",
    "train_date_range, test_date_range"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "2f39c0b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:07.825014Z",
     "iopub.status.busy": "2024-09-10T17:11:07.824341Z",
     "iopub.status.idle": "2024-09-10T17:11:08.104739Z",
     "shell.execute_reply": "2024-09-10T17:11:08.103775Z"
    },
    "papermill": {
     "duration": 0.313277,
     "end_time": "2024-09-10T17:11:08.107441",
     "exception": false,
     "start_time": "2024-09-10T17:11:07.794164",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Identify customers who are present in both train and test datasets\n",
    "common_customers = set(train_df['Customer ID']).intersection(set(test_df['Customer ID']))\n",
    "\n",
    "# Filter out transactions in train_df and test_df that belong to the common customers\n",
    "train_df_common = train_df[train_df['Customer ID'].isin(common_customers)]\n",
    "test_df_common = test_df[test_df['Customer ID'].isin(common_customers)]\n",
    "\n",
    "# We now have transactions of customers who are present in both train and test sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "8ae6db00",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:08.167613Z",
     "iopub.status.busy": "2024-09-10T17:11:08.166652Z",
     "iopub.status.idle": "2024-09-10T17:11:24.909556Z",
     "shell.execute_reply": "2024-09-10T17:11:24.908546Z"
    },
    "papermill": {
     "duration": 16.775616,
     "end_time": "2024-09-10T17:11:24.912054",
     "exception": false,
     "start_time": "2024-09-10T17:11:08.136438",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: mlxtend in /opt/conda/lib/python3.10/site-packages (0.23.1)\r\n",
      "Requirement already satisfied: scipy>=1.2.1 in /opt/conda/lib/python3.10/site-packages (from mlxtend) (1.14.0)\r\n",
      "Requirement already satisfied: numpy>=1.16.2 in /opt/conda/lib/python3.10/site-packages (from mlxtend) (1.26.4)\r\n",
      "Requirement already satisfied: pandas>=0.24.2 in /opt/conda/lib/python3.10/site-packages (from mlxtend) (2.2.2)\r\n",
      "Requirement already satisfied: scikit-learn>=1.0.2 in /opt/conda/lib/python3.10/site-packages (from mlxtend) (1.2.2)\r\n",
      "Requirement already satisfied: matplotlib>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from mlxtend) (3.7.5)\r\n",
      "Requirement already satisfied: joblib>=0.13.2 in /opt/conda/lib/python3.10/site-packages (from mlxtend) (1.4.2)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.0.0->mlxtend) (1.2.1)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.0.0->mlxtend) (0.12.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.0.0->mlxtend) (4.53.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.0.0->mlxtend) (1.4.5)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.0.0->mlxtend) (21.3)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.0.0->mlxtend) (9.5.0)\r\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.0.0->mlxtend) (3.1.2)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.0.0->mlxtend) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas>=0.24.2->mlxtend) (2024.1)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas>=0.24.2->mlxtend) (2024.1)\r\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=1.0.2->mlxtend) (3.5.0)\r\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib>=3.0.0->mlxtend) (1.16.0)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install mlxtend\n",
    "from mlxtend.frequent_patterns import fpgrowth, association_rules\n",
    "from mlxtend.preprocessing import TransactionEncoder\n",
    "\n",
    "\n",
    "# Convert the data into a list of transactions\n",
    "transactions = train_df_common.groupby('Invoice')['Description'].apply(list).values.tolist()\n",
    "\n",
    "# Initialize transaction encoder\n",
    "encoder = TransactionEncoder()\n",
    "\n",
    "# One-hot encode the data\n",
    "onehot = encoder.fit_transform(transactions)\n",
    "\n",
    "# Convert one-hot encoded data to a DataFrame\n",
    "onehot_df = pd.DataFrame(onehot, columns=encoder.columns_)\n",
    "\n",
    "# Apply the FP-Growth algorithm to find frequent itemsets\n",
    "frequent_itemsets = fpgrowth(onehot_df, min_support=0.01, use_colnames=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "aa100510",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:24.971770Z",
     "iopub.status.busy": "2024-09-10T17:11:24.971351Z",
     "iopub.status.idle": "2024-09-10T17:11:24.997156Z",
     "shell.execute_reply": "2024-09-10T17:11:24.996249Z"
    },
    "papermill": {
     "duration": 0.058044,
     "end_time": "2024-09-10T17:11:24.999416",
     "exception": false,
     "start_time": "2024-09-10T17:11:24.941372",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>support</th>\n",
       "      <th>confidence</th>\n",
       "      <th>lift</th>\n",
       "      <th>combined_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.015479</td>\n",
       "      <td>0.248976</td>\n",
       "      <td>1.679136</td>\n",
       "      <td>17.994947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.015479</td>\n",
       "      <td>0.104396</td>\n",
       "      <td>1.679136</td>\n",
       "      <td>14.466008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.021539</td>\n",
       "      <td>0.284657</td>\n",
       "      <td>1.919772</td>\n",
       "      <td>34.737117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.021539</td>\n",
       "      <td>0.145261</td>\n",
       "      <td>1.919772</td>\n",
       "      <td>31.334730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.012119</td>\n",
       "      <td>0.119960</td>\n",
       "      <td>1.585389</td>\n",
       "      <td>6.055689</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    support  confidence      lift  combined_score\n",
       "0  0.015479    0.248976  1.679136       17.994947\n",
       "1  0.015479    0.104396  1.679136       14.466008\n",
       "2  0.021539    0.284657  1.919772       34.737117\n",
       "3  0.021539    0.145261  1.919772       31.334730\n",
       "4  0.012119    0.119960  1.585389        6.055689"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from mlxtend.frequent_patterns import association_rules\n",
    "\n",
    "# Your existing code to generate rules\n",
    "# Generate rules\n",
    "rules = association_rules(frequent_itemsets, metric='confidence', min_threshold=0.1)\n",
    "\n",
    "# Function to normalize columns using Min-Max normalization\n",
    "def min_max_normalize(series):\n",
    "    return (series - series.min()) / (series.max() - series.min())\n",
    "\n",
    "# Normalize the 'support', 'confidence', and 'lift'\n",
    "rules['support_normalized'] = min_max_normalize(rules['support'])\n",
    "rules['confidence_normalized'] = min_max_normalize(rules['confidence'])\n",
    "rules['lift_normalized'] = min_max_normalize(rules['lift'])\n",
    "\n",
    "# Calculate the combined score as an average of the normalized values\n",
    "rules['combined_score'] = (rules['support_normalized']*60 + rules['confidence_normalized']*20 + rules['lift_normalized']*20)\n",
    "\n",
    "# Display the first few rows of the updated DataFrame to verify\n",
    "rules[['support', 'confidence', 'lift', 'combined_score']].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "a3b4c5fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:25.059555Z",
     "iopub.status.busy": "2024-09-10T17:11:25.058763Z",
     "iopub.status.idle": "2024-09-10T17:11:35.354649Z",
     "shell.execute_reply": "2024-09-10T17:11:35.353517Z"
    },
    "papermill": {
     "duration": 10.328183,
     "end_time": "2024-09-10T17:11:35.357175",
     "exception": false,
     "start_time": "2024-09-10T17:11:25.028992",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# For each customer in the test set, we make recommendations based on the highest confidence\n",
    "customer_recommendations = {}\n",
    "\n",
    "# We loop over each customer in the test set\n",
    "for customer in test_df_common['Customer ID'].unique():\n",
    "    # Get all items the customer has bought in the train set\n",
    "    items_bought = train_df_common[train_df_common['Customer ID'] == customer]['Description'].unique()\n",
    "    # Get all rules for these items\n",
    "    rules_for_customer = rules[rules['antecedents'].apply(lambda x: x.isdisjoint(items_bought) == False)]\n",
    "    # Sort the rules by confidence\n",
    "    sorted_rules = rules_for_customer.sort_values(by='combined_score', ascending=False)\n",
    "    # Take the top 10 recommendations\n",
    "    top_recommendations = sorted_rules['consequents'].head(10)\n",
    "    # Convert from frozenset to a regular list\n",
    "    top_recommendations = [list(x) for x in top_recommendations]\n",
    "    # Store in our dictionary\n",
    "    customer_recommendations[customer] = top_recommendations\n",
    "\n",
    "# Now we have the top 10 recommendations for each customer in the test set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "0c661bd2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:35.419170Z",
     "iopub.status.busy": "2024-09-10T17:11:35.418154Z",
     "iopub.status.idle": "2024-09-10T17:11:37.388897Z",
     "shell.execute_reply": "2024-09-10T17:11:37.388000Z"
    },
    "papermill": {
     "duration": 2.004656,
     "end_time": "2024-09-10T17:11:37.391257",
     "exception": false,
     "start_time": "2024-09-10T17:11:35.386601",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5977917981072555"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Initialize counter for customers with at least one correct recommendation\n",
    "customers_with_correct_recommendations = 0\n",
    "total_customers = len(customer_recommendations)\n",
    "\n",
    "# Check the recommendations against the test set\n",
    "for customer, recommendations in customer_recommendations.items():\n",
    "    # Flatten the list of recommendations\n",
    "    recommendations = set([item for sublist in recommendations for item in sublist])\n",
    "    # Get all items bought by the customer in the test set\n",
    "    items_bought_by_customer = set(test_df_common[test_df_common['Customer ID'] == customer]['Description'].unique())\n",
    "    # Check if there is at least one hit\n",
    "    hit = len(recommendations.intersection(items_bought_by_customer)) > 0\n",
    "    # If there's at least one hit, count the customer as a correct recommendation\n",
    "    if hit:\n",
    "        customers_with_correct_recommendations += 1\n",
    "\n",
    "# Calculate the binary accuracy\n",
    "binary_accuracy = customers_with_correct_recommendations / total_customers if total_customers else 0\n",
    "binary_accuracy\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "f239584a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:37.454554Z",
     "iopub.status.busy": "2024-09-10T17:11:37.454126Z",
     "iopub.status.idle": "2024-09-10T17:11:39.423692Z",
     "shell.execute_reply": "2024-09-10T17:11:39.422597Z"
    },
    "papermill": {
     "duration": 2.003969,
     "end_time": "2024-09-10T17:11:39.425970",
     "exception": false,
     "start_time": "2024-09-10T17:11:37.422001",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.20595691878223424, 0.07200647215063584)"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Initialize lists to store precision and recall for each customer\n",
    "precision_list = []\n",
    "recall_list = []\n",
    "\n",
    "total_customs = len(customer_recommendations)\n",
    "\n",
    "for customer, recommendations in customer_recommendations.items():\n",
    "    # Flatten the list of recommendations\n",
    "    recommendations = set([item for sublist in recommendations for item in sublist])\n",
    "    # Get all items bought by the customer in the test set\n",
    "    items_bought_by_customer = set(test_df_common[test_df_common['Customer ID'] == customer]['Description'].unique())\n",
    "    \n",
    "    # Calculate hits\n",
    "    hits = recommendations.intersection(items_bought_by_customer)\n",
    "    \n",
    "    # Calculate precision and recall\n",
    "    if len(recommendations) > 0:\n",
    "        precision = len(hits) / len(recommendations)\n",
    "    else:\n",
    "        precision = 0\n",
    "    if len(items_bought_by_customer) > 0:\n",
    "        recall = len(hits) / len(items_bought_by_customer)\n",
    "    else:\n",
    "        \n",
    "        recall = 0\n",
    "    \n",
    "    precision_list.append(precision)\n",
    "    recall_list.append(recall)\n",
    "\n",
    "# Calculate MAP and F1-score\n",
    "mean_average_precision = np.mean(precision_list)\n",
    "mean_recall = np.mean(recall_list)\n",
    "if mean_average_precision + mean_recall > 0:\n",
    "    f1_score = 2 * (mean_average_precision * mean_recall) / (mean_average_precision + mean_recall)\n",
    "else:\n",
    "    f1_score = 0\n",
    "\n",
    "mean_average_precision, f1_score"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfb5d721",
   "metadata": {
    "papermill": {
     "duration": 0.029275,
     "end_time": "2024-09-10T17:11:39.486501",
     "exception": false,
     "start_time": "2024-09-10T17:11:39.457226",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 5- Cluster Based Association Rule Mining - Apriori"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "fb1c5e2b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:39.547315Z",
     "iopub.status.busy": "2024-09-10T17:11:39.546858Z",
     "iopub.status.idle": "2024-09-10T17:11:39.716782Z",
     "shell.execute_reply": "2024-09-10T17:11:39.715641Z"
    },
    "papermill": {
     "duration": 0.203573,
     "end_time": "2024-09-10T17:11:39.719420",
     "exception": false,
     "start_time": "2024-09-10T17:11:39.515847",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Customer ID'] = df['Customer ID'].astype(customer_df['Customer ID'].dtype)\n",
    "df = pd.merge(df, customer_df[['Customer ID', 'Cluster']], on='Customer ID', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "33d84cf3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:39.780260Z",
     "iopub.status.busy": "2024-09-10T17:11:39.779819Z",
     "iopub.status.idle": "2024-09-10T17:11:59.658106Z",
     "shell.execute_reply": "2024-09-10T17:11:59.657202Z"
    },
    "papermill": {
     "duration": 19.911759,
     "end_time": "2024-09-10T17:11:59.660513",
     "exception": false,
     "start_time": "2024-09-10T17:11:39.748754",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing cluster 0\n",
      "Processing cluster 2\n",
      "Processing cluster 3\n",
      "Processing cluster 1\n",
      "Processing cluster 4\n"
     ]
    }
   ],
   "source": [
    "# import pandas as pd\n",
    "import numpy as np\n",
    "from mlxtend.frequent_patterns import fpgrowth, association_rules\n",
    "from mlxtend.preprocessing import TransactionEncoder\n",
    "\n",
    "cluster_ids = df['Cluster'].unique()\n",
    "\n",
    "# Results container for each cluster\n",
    "cluster_results = {}\n",
    "\n",
    "for cluster_id in cluster_ids:\n",
    "    print(f\"Processing cluster {cluster_id}\")\n",
    "    cluster_df = df[df['Cluster'] == cluster_id]\n",
    "    \n",
    "    # Sort cluster data by InvoiceDate\n",
    "    df_sorted = cluster_df.sort_values('InvoiceDate')\n",
    "    \n",
    "    # Calculate the index to split on - 70% for training\n",
    "    split_idx = int(len(df_sorted) * 0.7)\n",
    "    \n",
    "    # Create the train and test datasets\n",
    "    train_df = df_sorted[:split_idx]\n",
    "    test_df = df_sorted[split_idx:]\n",
    "    \n",
    "    # Identify customers who are present in both train and test datasets\n",
    "    common_customers = set(train_df['Customer ID']).intersection(set(test_df['Customer ID']))\n",
    "    \n",
    "    # Filter out transactions in train_df and test_df that belong to the common customers\n",
    "    train_df_common = train_df[train_df['Customer ID'].isin(common_customers)]\n",
    "    test_df_common = test_df[test_df['Customer ID'].isin(common_customers)]\n",
    "    \n",
    "    # Convert the data into a list of transactions\n",
    "    transactions = train_df_common.groupby('Invoice')['Description'].apply(list).values.tolist()\n",
    "    \n",
    "    # Initialize transaction encoder\n",
    "    encoder = TransactionEncoder()\n",
    "    \n",
    "    # One-hot encode the data\n",
    "    onehot = encoder.fit_transform(transactions)\n",
    "    \n",
    "    # Convert one-hot encoded data to a DataFrame\n",
    "    onehot_df = pd.DataFrame(onehot, columns=encoder.columns_)\n",
    "    \n",
    "    # Apply the FP-Growth algorithm to find frequent itemsets\n",
    "    frequent_itemsets = fpgrowth(onehot_df, min_support=0.01, use_colnames=True)\n",
    "    \n",
    "    # Generate rules\n",
    "    rules = association_rules(frequent_itemsets, metric='confidence', min_threshold=0.1)\n",
    "    \n",
    "    # Normalize the 'support', 'confidence', and 'lift'\n",
    "    rules['support_normalized'] = min_max_normalize(rules['support'])\n",
    "    rules['confidence_normalized'] = min_max_normalize(rules['confidence'])\n",
    "    rules['lift_normalized'] = min_max_normalize(rules['lift'])\n",
    "    \n",
    "    # Calculate the combined score\n",
    "    rules['combined_score'] = (rules['support_normalized']*60 + rules['confidence_normalized']*20 + rules['lift_normalized']*20)\n",
    "    \n",
    "    # For each customer in the test set, we make recommendations based on the highest combined_score\n",
    "    customer_recommendations = {}\n",
    "    for customer in test_df_common['Customer ID'].unique():\n",
    "        # Get all items the customer has bought in the train set\n",
    "        items_bought = train_df_common[train_df_common['Customer ID'] == customer]['Description'].unique()\n",
    "        # Get all rules for these items\n",
    "        rules_for_customer = rules[rules['antecedents'].apply(lambda x: x.isdisjoint(items_bought) == False)]\n",
    "        # Sort the rules by combined_score\n",
    "        sorted_rules = rules_for_customer.sort_values(by='combined_score', ascending=False)\n",
    "        # Take the top 10 recommendations\n",
    "        top_recommendations = sorted_rules['consequents'].head(10)\n",
    "        # Convert from frozenset to a regular list\n",
    "        top_recommendations = [list(x) for x in top_recommendations]\n",
    "        # Store in our dictionary\n",
    "        customer_recommendations[customer] = top_recommendations\n",
    "\n",
    "    # Evaluate recommendations\n",
    "    customers_with_correct_recommendations = 0\n",
    "    precision_list = []\n",
    "    recall_list = []\n",
    "\n",
    "    for customer, recommendations in customer_recommendations.items():\n",
    "        # Flatten the list of recommendations\n",
    "        recommendations = set([item for sublist in recommendations for item in sublist])\n",
    "        # Get all items bought by the customer in the test set\n",
    "        items_bought_by_customer = set(test_df_common[test_df_common['Customer ID'] == customer]['Description'].unique())\n",
    "        # Check if there is at least one hit\n",
    "        hit = len(recommendations.intersection(items_bought_by_customer)) > 0\n",
    "        if hit:\n",
    "            customers_with_correct_recommendations += 1\n",
    "        # Calculate precision and recall\n",
    "        precision = len(recommendations.intersection(items_bought_by_customer)) / len(recommendations) if recommendations else 0\n",
    "        recall = len(recommendations.intersection(items_bought_by_customer)) / len(items_bought_by_customer) if items_bought_by_customer else 0\n",
    "        precision_list.append(precision)\n",
    "        recall_list.append(recall)\n",
    "    \n",
    "    # Calculate metrics\n",
    "    binary_accuracy = customers_with_correct_recommendations / len(customer_recommendations) if customer_recommendations else 0\n",
    "    mean_average_precision = np.mean(precision_list)\n",
    "    mean_recall = np.mean(recall_list)\n",
    "    f1_score = 2 * (mean_average_precision * mean_recall) / (mean_average_precision + mean_recall) if (mean_average_precision + mean_recall) > 0 else 0\n",
    "\n",
    "    # Store results\n",
    "    cluster_results[cluster_id] = {'Binary Accuracy': binary_accuracy, 'MAP': mean_average_precision, 'F1 Score': f1_score}\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "81f825f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:59.722668Z",
     "iopub.status.busy": "2024-09-10T17:11:59.721802Z",
     "iopub.status.idle": "2024-09-10T17:11:59.727764Z",
     "shell.execute_reply": "2024-09-10T17:11:59.726695Z"
    },
    "papermill": {
     "duration": 0.039679,
     "end_time": "2024-09-10T17:11:59.730035",
     "exception": false,
     "start_time": "2024-09-10T17:11:59.690356",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cluster 0: {'Binary Accuracy': 0.5270398481973435, 'MAP': 0.16858038914490528, 'F1 Score': 0.06797548068837023}\n",
      "Cluster 2: {'Binary Accuracy': 0.8876404494382022, 'MAP': 0.4119092206170858, 'F1 Score': 0.0702909843154264}\n",
      "Cluster 3: {'Binary Accuracy': 0.4129353233830846, 'MAP': 0.11626095711916609, 'F1 Score': 0.061199532233227355}\n",
      "Cluster 1: {'Binary Accuracy': 1.0, 'MAP': 0.6089743589743589, 'F1 Score': 0.04660454833924332}\n",
      "Cluster 4: {'Binary Accuracy': 0.3888888888888889, 'MAP': 0.13907260435038213, 'F1 Score': 0.08783274679652742}\n"
     ]
    }
   ],
   "source": [
    "# Print cluster results\n",
    "for cluster_id, metrics in cluster_results.items():\n",
    "    print(f\"Cluster {cluster_id}: {metrics}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "4724d411",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:59.792180Z",
     "iopub.status.busy": "2024-09-10T17:11:59.791189Z",
     "iopub.status.idle": "2024-09-10T17:11:59.798302Z",
     "shell.execute_reply": "2024-09-10T17:11:59.797328Z"
    },
    "papermill": {
     "duration": 0.040437,
     "end_time": "2024-09-10T17:11:59.800511",
     "exception": false,
     "start_time": "2024-09-10T17:11:59.760074",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: {'Binary Accuracy': 0.5270398481973435,\n",
       "  'MAP': 0.16858038914490528,\n",
       "  'F1 Score': 0.06797548068837023},\n",
       " 2: {'Binary Accuracy': 0.8876404494382022,\n",
       "  'MAP': 0.4119092206170858,\n",
       "  'F1 Score': 0.0702909843154264},\n",
       " 3: {'Binary Accuracy': 0.4129353233830846,\n",
       "  'MAP': 0.11626095711916609,\n",
       "  'F1 Score': 0.061199532233227355},\n",
       " 1: {'Binary Accuracy': 1.0,\n",
       "  'MAP': 0.6089743589743589,\n",
       "  'F1 Score': 0.04660454833924332},\n",
       " 4: {'Binary Accuracy': 0.3888888888888889,\n",
       "  'MAP': 0.13907260435038213,\n",
       "  'F1 Score': 0.08783274679652742}}"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster_results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a78955ff",
   "metadata": {
    "papermill": {
     "duration": 0.030408,
     "end_time": "2024-09-10T17:11:59.860995",
     "exception": false,
     "start_time": "2024-09-10T17:11:59.830587",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 6- Recommendation Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "b858320f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:59.923521Z",
     "iopub.status.busy": "2024-09-10T17:11:59.923044Z",
     "iopub.status.idle": "2024-09-10T17:11:59.932194Z",
     "shell.execute_reply": "2024-09-10T17:11:59.931127Z"
    },
    "papermill": {
     "duration": 0.042722,
     "end_time": "2024-09-10T17:11:59.934193",
     "exception": false,
     "start_time": "2024-09-10T17:11:59.891471",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Convert the cluster_results dictionary into a DataFrame\n",
    "cluster_results_df = pd.DataFrame.from_dict(cluster_results, orient='index')\n",
    "\n",
    "# Reset the index to turn the cluster IDs from the index into a regular column\n",
    "cluster_results_df.reset_index(inplace=True)\n",
    "\n",
    "# Rename the 'index' column to 'Cluster ID'\n",
    "cluster_results_df.rename(columns={'index': 'Cluster ID'}, inplace=True)\n",
    "\n",
    "# Optionally, you can set the order of columns if needed\n",
    "cluster_results_df = cluster_results_df[['Cluster ID', 'Binary Accuracy', 'MAP', 'F1 Score']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "600bb469",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:11:59.995834Z",
     "iopub.status.busy": "2024-09-10T17:11:59.995414Z",
     "iopub.status.idle": "2024-09-10T17:12:00.001540Z",
     "shell.execute_reply": "2024-09-10T17:12:00.000641Z"
    },
    "papermill": {
     "duration": 0.039368,
     "end_time": "2024-09-10T17:12:00.003831",
     "exception": false,
     "start_time": "2024-09-10T17:11:59.964463",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "cluster_results_df=cluster_results_df.sort_values(by=\"Cluster ID\",ascending=True).reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "88bf2310",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:12:00.066104Z",
     "iopub.status.busy": "2024-09-10T17:12:00.065682Z",
     "iopub.status.idle": "2024-09-10T17:12:00.086690Z",
     "shell.execute_reply": "2024-09-10T17:12:00.085555Z"
    },
    "papermill": {
     "duration": 0.054729,
     "end_time": "2024-09-10T17:12:00.088803",
     "exception": false,
     "start_time": "2024-09-10T17:12:00.034074",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Customer ID</th>\n",
       "      <th>TotalItemsBought</th>\n",
       "      <th>AvgSpendingPerInvoice</th>\n",
       "      <th>AvgSpendingPerItem</th>\n",
       "      <th>FrequencyValue</th>\n",
       "      <th>MonetaryValue</th>\n",
       "      <th>RecencyValue</th>\n",
       "      <th>Recency_Score</th>\n",
       "      <th>Frequency_Score</th>\n",
       "      <th>Monetary_Score</th>\n",
       "      <th>RF_Score</th>\n",
       "      <th>RFM Segment</th>\n",
       "      <th>Cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12346.0</td>\n",
       "      <td>70</td>\n",
       "      <td>33.896364</td>\n",
       "      <td>5.326571</td>\n",
       "      <td>11</td>\n",
       "      <td>372.86</td>\n",
       "      <td>528</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>Cant-loose</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12347.0</td>\n",
       "      <td>2727</td>\n",
       "      <td>583.991250</td>\n",
       "      <td>1.713212</td>\n",
       "      <td>8</td>\n",
       "      <td>4671.93</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>54</td>\n",
       "      <td>Champions</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12348.0</td>\n",
       "      <td>2705</td>\n",
       "      <td>331.880000</td>\n",
       "      <td>0.613457</td>\n",
       "      <td>5</td>\n",
       "      <td>1659.40</td>\n",
       "      <td>74</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>34</td>\n",
       "      <td>Loyal_customers</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12349.0</td>\n",
       "      <td>1616</td>\n",
       "      <td>1166.313333</td>\n",
       "      <td>2.165186</td>\n",
       "      <td>3</td>\n",
       "      <td>3498.94</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>53</td>\n",
       "      <td>Potential_loyalists</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12350.0</td>\n",
       "      <td>196</td>\n",
       "      <td>294.400000</td>\n",
       "      <td>1.502041</td>\n",
       "      <td>1</td>\n",
       "      <td>294.40</td>\n",
       "      <td>309</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>21</td>\n",
       "      <td>Hibernating</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5807</th>\n",
       "      <td>18283.0</td>\n",
       "      <td>1679</td>\n",
       "      <td>121.131818</td>\n",
       "      <td>1.587195</td>\n",
       "      <td>22</td>\n",
       "      <td>2664.90</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>55</td>\n",
       "      <td>Champions</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5808</th>\n",
       "      <td>18284.0</td>\n",
       "      <td>493</td>\n",
       "      <td>411.680000</td>\n",
       "      <td>0.835051</td>\n",
       "      <td>1</td>\n",
       "      <td>411.68</td>\n",
       "      <td>431</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>Hibernating</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5809</th>\n",
       "      <td>18285.0</td>\n",
       "      <td>144</td>\n",
       "      <td>377.000000</td>\n",
       "      <td>2.618056</td>\n",
       "      <td>1</td>\n",
       "      <td>377.00</td>\n",
       "      <td>660</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>Hibernating</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5810</th>\n",
       "      <td>18286.0</td>\n",
       "      <td>604</td>\n",
       "      <td>585.790000</td>\n",
       "      <td>1.939702</td>\n",
       "      <td>2</td>\n",
       "      <td>1171.58</td>\n",
       "      <td>476</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>13</td>\n",
       "      <td>At_risk</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5811</th>\n",
       "      <td>18287.0</td>\n",
       "      <td>3012</td>\n",
       "      <td>590.427143</td>\n",
       "      <td>1.372175</td>\n",
       "      <td>7</td>\n",
       "      <td>4132.99</td>\n",
       "      <td>42</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>44</td>\n",
       "      <td>Loyal_customers</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5812 rows Ã— 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Customer ID  TotalItemsBought  AvgSpendingPerInvoice  \\\n",
       "0         12346.0                70              33.896364   \n",
       "1         12347.0              2727             583.991250   \n",
       "2         12348.0              2705             331.880000   \n",
       "3         12349.0              1616            1166.313333   \n",
       "4         12350.0               196             294.400000   \n",
       "...           ...               ...                    ...   \n",
       "5807      18283.0              1679             121.131818   \n",
       "5808      18284.0               493             411.680000   \n",
       "5809      18285.0               144             377.000000   \n",
       "5810      18286.0               604             585.790000   \n",
       "5811      18287.0              3012             590.427143   \n",
       "\n",
       "      AvgSpendingPerItem  FrequencyValue  MonetaryValue  RecencyValue  \\\n",
       "0               5.326571              11         372.86           528   \n",
       "1               1.713212               8        4671.93             1   \n",
       "2               0.613457               5        1659.40            74   \n",
       "3               2.165186               3        3498.94            18   \n",
       "4               1.502041               1         294.40           309   \n",
       "...                  ...             ...            ...           ...   \n",
       "5807            1.587195              22        2664.90             3   \n",
       "5808            0.835051               1         411.68           431   \n",
       "5809            2.618056               1         377.00           660   \n",
       "5810            1.939702               2        1171.58           476   \n",
       "5811            1.372175               7        4132.99            42   \n",
       "\n",
       "     Recency_Score Frequency_Score Monetary_Score RF_Score  \\\n",
       "0                1               5              2       15   \n",
       "1                5               4              5       54   \n",
       "2                3               4              4       34   \n",
       "3                5               3              5       53   \n",
       "4                2               1              2       21   \n",
       "...            ...             ...            ...      ...   \n",
       "5807             5               5              4       55   \n",
       "5808             1               2              2       12   \n",
       "5809             1               2              2       12   \n",
       "5810             1               3              4       13   \n",
       "5811             4               4              5       44   \n",
       "\n",
       "              RFM Segment  Cluster  \n",
       "0              Cant-loose        4  \n",
       "1               Champions        0  \n",
       "2         Loyal_customers        0  \n",
       "3     Potential_loyalists        0  \n",
       "4             Hibernating        3  \n",
       "...                   ...      ...  \n",
       "5807            Champions        0  \n",
       "5808          Hibernating        3  \n",
       "5809          Hibernating        3  \n",
       "5810              At_risk        3  \n",
       "5811      Loyal_customers        0  \n",
       "\n",
       "[5812 rows x 13 columns]"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "customer_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "b6255f60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:12:00.151539Z",
     "iopub.status.busy": "2024-09-10T17:12:00.151128Z",
     "iopub.status.idle": "2024-09-10T17:12:00.163286Z",
     "shell.execute_reply": "2024-09-10T17:12:00.162172Z"
    },
    "papermill": {
     "duration": 0.04581,
     "end_time": "2024-09-10T17:12:00.165374",
     "exception": false,
     "start_time": "2024-09-10T17:12:00.119564",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cluster ID</th>\n",
       "      <th>Binary Accuracy</th>\n",
       "      <th>MAP</th>\n",
       "      <th>F1 Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.53</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.61</td>\n",
       "      <td>0.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0.89</td>\n",
       "      <td>0.41</td>\n",
       "      <td>0.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0.41</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>0.39</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Cluster ID  Binary Accuracy   MAP  F1 Score\n",
       "0           0             0.53  0.17      0.07\n",
       "1           1             1.00  0.61      0.05\n",
       "2           2             0.89  0.41      0.07\n",
       "3           3             0.41  0.12      0.06\n",
       "4           4             0.39  0.14      0.09"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster_results_df.round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "b14ee4e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:12:00.228881Z",
     "iopub.status.busy": "2024-09-10T17:12:00.228451Z",
     "iopub.status.idle": "2024-09-10T17:12:00.235910Z",
     "shell.execute_reply": "2024-09-10T17:12:00.234863Z"
    },
    "papermill": {
     "duration": 0.041702,
     "end_time": "2024-09-10T17:12:00.238039",
     "exception": false,
     "start_time": "2024-09-10T17:12:00.196337",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "all_cluster_ids = cluster_results_df['Cluster ID']\n",
    "cluster_counts_full = customer_df['Cluster'].value_counts().reindex(all_cluster_ids, fill_value=0)\n",
    "\n",
    "# Add cluster counts to the cluster_results_df\n",
    "cluster_results_df['Number of Rows'] = cluster_counts_full.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "2c4bb60c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:12:00.300948Z",
     "iopub.status.busy": "2024-09-10T17:12:00.300525Z",
     "iopub.status.idle": "2024-09-10T17:12:00.311880Z",
     "shell.execute_reply": "2024-09-10T17:12:00.310840Z"
    },
    "papermill": {
     "duration": 0.04557,
     "end_time": "2024-09-10T17:12:00.314441",
     "exception": false,
     "start_time": "2024-09-10T17:12:00.268871",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cluster ID</th>\n",
       "      <th>Binary Accuracy</th>\n",
       "      <th>MAP</th>\n",
       "      <th>F1 Score</th>\n",
       "      <th>Number of Rows</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.527040</td>\n",
       "      <td>0.168580</td>\n",
       "      <td>0.067975</td>\n",
       "      <td>3431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.608974</td>\n",
       "      <td>0.046605</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0.887640</td>\n",
       "      <td>0.411909</td>\n",
       "      <td>0.070291</td>\n",
       "      <td>302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0.412935</td>\n",
       "      <td>0.116261</td>\n",
       "      <td>0.061200</td>\n",
       "      <td>1760</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>0.388889</td>\n",
       "      <td>0.139073</td>\n",
       "      <td>0.087833</td>\n",
       "      <td>306</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Cluster ID  Binary Accuracy       MAP  F1 Score  Number of Rows\n",
       "0           0         0.527040  0.168580  0.067975            3431\n",
       "1           1         1.000000  0.608974  0.046605              13\n",
       "2           2         0.887640  0.411909  0.070291             302\n",
       "3           3         0.412935  0.116261  0.061200            1760\n",
       "4           4         0.388889  0.139073  0.087833             306"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster_results_df\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c527be6a",
   "metadata": {
    "papermill": {
     "duration": 0.030247,
     "end_time": "2024-09-10T17:12:00.375786",
     "exception": false,
     "start_time": "2024-09-10T17:12:00.345539",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "As we can see above, accuracies are significantly increased. Which shows that our method works well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "ff6e509e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:12:00.440343Z",
     "iopub.status.busy": "2024-09-10T17:12:00.439500Z",
     "iopub.status.idle": "2024-09-10T17:12:00.459096Z",
     "shell.execute_reply": "2024-09-10T17:12:00.458265Z"
    },
    "papermill": {
     "duration": 0.054313,
     "end_time": "2024-09-10T17:12:00.461527",
     "exception": false,
     "start_time": "2024-09-10T17:12:00.407214",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "cluster_results_df.round(2).to_excel(\"cluster_results_retail.xlsx\",index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "e1bc3ade",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:12:00.526839Z",
     "iopub.status.busy": "2024-09-10T17:12:00.525879Z",
     "iopub.status.idle": "2024-09-10T17:12:00.613744Z",
     "shell.execute_reply": "2024-09-10T17:12:00.612707Z"
    },
    "papermill": {
     "duration": 0.123355,
     "end_time": "2024-09-10T17:12:00.615997",
     "exception": false,
     "start_time": "2024-09-10T17:12:00.492642",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5235"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df[\"Description\"].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "a3c297a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:12:00.679801Z",
     "iopub.status.busy": "2024-09-10T17:12:00.679389Z",
     "iopub.status.idle": "2024-09-10T17:12:00.691366Z",
     "shell.execute_reply": "2024-09-10T17:12:00.690259Z"
    },
    "papermill": {
     "duration": 0.046297,
     "end_time": "2024-09-10T17:12:00.693440",
     "exception": false,
     "start_time": "2024-09-10T17:12:00.647143",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top 2 customers selected based on transaction frequency: [16326.0, 14978.0]\n"
     ]
    }
   ],
   "source": [
    "# Combine them for initial analysis if needed\n",
    "full_df_common = pd.concat([train_df_common, test_df_common])\n",
    "\n",
    "# Find the two customers with the highest transaction frequency\n",
    "top_customers = full_df_common['Customer ID'].value_counts().nlargest(2).index.tolist()\n",
    "print(\"Top 2 customers selected based on transaction frequency:\", top_customers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "44da5858",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:12:00.757365Z",
     "iopub.status.busy": "2024-09-10T17:12:00.756911Z",
     "iopub.status.idle": "2024-09-10T17:12:00.779024Z",
     "shell.execute_reply": "2024-09-10T17:12:00.777784Z"
    },
    "papermill": {
     "duration": 0.056484,
     "end_time": "2024-09-10T17:12:00.781150",
     "exception": false,
     "start_time": "2024-09-10T17:12:00.724666",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Customer ID</th>\n",
       "      <th>TotalItemsBought</th>\n",
       "      <th>AvgSpendingPerInvoice</th>\n",
       "      <th>AvgSpendingPerItem</th>\n",
       "      <th>FrequencyValue</th>\n",
       "      <th>MonetaryValue</th>\n",
       "      <th>RecencyValue</th>\n",
       "      <th>Recency_Score</th>\n",
       "      <th>Frequency_Score</th>\n",
       "      <th>Monetary_Score</th>\n",
       "      <th>RF_Score</th>\n",
       "      <th>RFM Segment</th>\n",
       "      <th>Cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12346.0</td>\n",
       "      <td>70</td>\n",
       "      <td>33.896364</td>\n",
       "      <td>5.326571</td>\n",
       "      <td>11</td>\n",
       "      <td>372.86</td>\n",
       "      <td>528</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>Cant-loose</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12347.0</td>\n",
       "      <td>2727</td>\n",
       "      <td>583.991250</td>\n",
       "      <td>1.713212</td>\n",
       "      <td>8</td>\n",
       "      <td>4671.93</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>54</td>\n",
       "      <td>Champions</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12348.0</td>\n",
       "      <td>2705</td>\n",
       "      <td>331.880000</td>\n",
       "      <td>0.613457</td>\n",
       "      <td>5</td>\n",
       "      <td>1659.40</td>\n",
       "      <td>74</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>34</td>\n",
       "      <td>Loyal_customers</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12349.0</td>\n",
       "      <td>1616</td>\n",
       "      <td>1166.313333</td>\n",
       "      <td>2.165186</td>\n",
       "      <td>3</td>\n",
       "      <td>3498.94</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>53</td>\n",
       "      <td>Potential_loyalists</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12350.0</td>\n",
       "      <td>196</td>\n",
       "      <td>294.400000</td>\n",
       "      <td>1.502041</td>\n",
       "      <td>1</td>\n",
       "      <td>294.40</td>\n",
       "      <td>309</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>21</td>\n",
       "      <td>Hibernating</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5807</th>\n",
       "      <td>18283.0</td>\n",
       "      <td>1679</td>\n",
       "      <td>121.131818</td>\n",
       "      <td>1.587195</td>\n",
       "      <td>22</td>\n",
       "      <td>2664.90</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>55</td>\n",
       "      <td>Champions</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5808</th>\n",
       "      <td>18284.0</td>\n",
       "      <td>493</td>\n",
       "      <td>411.680000</td>\n",
       "      <td>0.835051</td>\n",
       "      <td>1</td>\n",
       "      <td>411.68</td>\n",
       "      <td>431</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>Hibernating</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5809</th>\n",
       "      <td>18285.0</td>\n",
       "      <td>144</td>\n",
       "      <td>377.000000</td>\n",
       "      <td>2.618056</td>\n",
       "      <td>1</td>\n",
       "      <td>377.00</td>\n",
       "      <td>660</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>Hibernating</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5810</th>\n",
       "      <td>18286.0</td>\n",
       "      <td>604</td>\n",
       "      <td>585.790000</td>\n",
       "      <td>1.939702</td>\n",
       "      <td>2</td>\n",
       "      <td>1171.58</td>\n",
       "      <td>476</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>13</td>\n",
       "      <td>At_risk</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5811</th>\n",
       "      <td>18287.0</td>\n",
       "      <td>3012</td>\n",
       "      <td>590.427143</td>\n",
       "      <td>1.372175</td>\n",
       "      <td>7</td>\n",
       "      <td>4132.99</td>\n",
       "      <td>42</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>44</td>\n",
       "      <td>Loyal_customers</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5812 rows Ã— 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Customer ID  TotalItemsBought  AvgSpendingPerInvoice  \\\n",
       "0         12346.0                70              33.896364   \n",
       "1         12347.0              2727             583.991250   \n",
       "2         12348.0              2705             331.880000   \n",
       "3         12349.0              1616            1166.313333   \n",
       "4         12350.0               196             294.400000   \n",
       "...           ...               ...                    ...   \n",
       "5807      18283.0              1679             121.131818   \n",
       "5808      18284.0               493             411.680000   \n",
       "5809      18285.0               144             377.000000   \n",
       "5810      18286.0               604             585.790000   \n",
       "5811      18287.0              3012             590.427143   \n",
       "\n",
       "      AvgSpendingPerItem  FrequencyValue  MonetaryValue  RecencyValue  \\\n",
       "0               5.326571              11         372.86           528   \n",
       "1               1.713212               8        4671.93             1   \n",
       "2               0.613457               5        1659.40            74   \n",
       "3               2.165186               3        3498.94            18   \n",
       "4               1.502041               1         294.40           309   \n",
       "...                  ...             ...            ...           ...   \n",
       "5807            1.587195              22        2664.90             3   \n",
       "5808            0.835051               1         411.68           431   \n",
       "5809            2.618056               1         377.00           660   \n",
       "5810            1.939702               2        1171.58           476   \n",
       "5811            1.372175               7        4132.99            42   \n",
       "\n",
       "     Recency_Score Frequency_Score Monetary_Score RF_Score  \\\n",
       "0                1               5              2       15   \n",
       "1                5               4              5       54   \n",
       "2                3               4              4       34   \n",
       "3                5               3              5       53   \n",
       "4                2               1              2       21   \n",
       "...            ...             ...            ...      ...   \n",
       "5807             5               5              4       55   \n",
       "5808             1               2              2       12   \n",
       "5809             1               2              2       12   \n",
       "5810             1               3              4       13   \n",
       "5811             4               4              5       44   \n",
       "\n",
       "              RFM Segment  Cluster  \n",
       "0              Cant-loose        4  \n",
       "1               Champions        0  \n",
       "2         Loyal_customers        0  \n",
       "3     Potential_loyalists        0  \n",
       "4             Hibernating        3  \n",
       "...                   ...      ...  \n",
       "5807            Champions        0  \n",
       "5808          Hibernating        3  \n",
       "5809          Hibernating        3  \n",
       "5810              At_risk        3  \n",
       "5811      Loyal_customers        0  \n",
       "\n",
       "[5812 rows x 13 columns]"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "customer_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "0c8dd3fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:12:00.845773Z",
     "iopub.status.busy": "2024-09-10T17:12:00.845349Z",
     "iopub.status.idle": "2024-09-10T17:12:00.853132Z",
     "shell.execute_reply": "2024-09-10T17:12:00.852095Z"
    },
    "papermill": {
     "duration": 0.042846,
     "end_time": "2024-09-10T17:12:00.855235",
     "exception": false,
     "start_time": "2024-09-10T17:12:00.812389",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([17830., 16943., 16769., 15304., 14538., 12823., 15373., 17929.,\n",
       "       14180., 18037., 14543., 14970., 15223., 16586., 15694., 15109.,\n",
       "       14958., 13484., 15135., 14978., 17384., 17374., 14199., 14145.,\n",
       "       16326., 15729., 14681., 14853., 13631., 16998., 13405., 12464.,\n",
       "       12974., 15852., 16462., 15969., 12584., 17351., 17110., 18203.,\n",
       "       13302., 13029., 17553., 12917., 17134., 13067., 13416., 15154.,\n",
       "       15299., 12789., 17647., 18042., 17018., 17901.])"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df_common[\"Customer ID\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "8e15c229",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:12:00.920715Z",
     "iopub.status.busy": "2024-09-10T17:12:00.920266Z",
     "iopub.status.idle": "2024-09-10T17:12:00.929902Z",
     "shell.execute_reply": "2024-09-10T17:12:00.928654Z"
    },
    "papermill": {
     "duration": 0.045022,
     "end_time": "2024-09-10T17:12:00.931958",
     "exception": false,
     "start_time": "2024-09-10T17:12:00.886936",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Purchased items by 16326.0 in the training set:\n",
      "['HEART FILIGREE DOVE  SMALL' 'HEART FILIGREE DOVE LARGE'\n",
      " 'LOVEBIRD HANGING DECORATION WHITE ' 'WILLOW BRANCH LIGHTS.'\n",
      " ' WHITE CHERRY LIGHTS' 'DOOR MAT BIRD ON THE WIRE'\n",
      " 'FANCY FONT HOME SWEET HOME DOORMAT' 'SPOTTY  HOME SWEET HOME DOORMAT'\n",
      " 'DOOR MAT NEW ENGLAND' 'DOOR MAT 3 SMILEY CATS' 'DOOR MAT TOPIARY'\n",
      " 'DOOR MAT AIRMAIL ' 'DOOR MAT FANCY FONT HOME SWEET HOME'\n",
      " 'DOORMAT WELCOME PUPPIES' 'DOORMAT UNION FLAG'\n",
      " 'DOORMAT MULTICOLOUR STRIPE' 'DOORMAT HOME SWEET HOME BLUE '\n",
      " 'DOORMAT TOPIARY' 'DOORMAT NEW ENGLAND' 'DOORMAT RED RETROSPOT'\n",
      " 'DOORMAT WELCOME TO OUR HOME' 'DOORMAT FANCY FONT HOME SWEET HOME']\n",
      "\n",
      "Purchased items by 14978.0 in the training set:\n",
      "['HEART FILIGREE DOVE  SMALL' 'HEART FILIGREE DOVE LARGE'\n",
      " 'LOVEBIRD HANGING DECORATION WHITE ' 'WILLOW BRANCH LIGHTS.'\n",
      " ' WHITE CHERRY LIGHTS' 'DOOR MAT BIRD ON THE WIRE'\n",
      " 'FANCY FONT HOME SWEET HOME DOORMAT' 'SPOTTY  HOME SWEET HOME DOORMAT'\n",
      " 'DOOR MAT NEW ENGLAND' 'DOOR MAT 3 SMILEY CATS' 'DOOR MAT TOPIARY'\n",
      " 'DOOR MAT AIRMAIL ' 'DOOR MAT FANCY FONT HOME SWEET HOME'\n",
      " 'DOORMAT WELCOME PUPPIES' 'DOORMAT UNION FLAG'\n",
      " 'DOORMAT MULTICOLOUR STRIPE' 'DOORMAT HOME SWEET HOME BLUE '\n",
      " 'DOORMAT TOPIARY' 'DOORMAT NEW ENGLAND' 'DOORMAT RED RETROSPOT'\n",
      " 'DOORMAT WELCOME TO OUR HOME' 'DOORMAT FANCY FONT HOME SWEET HOME']\n"
     ]
    }
   ],
   "source": [
    "# Display what these customers bought during the training period\n",
    "for customer in top_customers:\n",
    "    purchased_items = train_df_common[train_df_common['Customer ID'] == 17018]['Description'].unique()\n",
    "    print(f\"\\nPurchased items by {customer} in the training set:\")\n",
    "    print(purchased_items)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "83e6611b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:12:00.996854Z",
     "iopub.status.busy": "2024-09-10T17:12:00.996321Z",
     "iopub.status.idle": "2024-09-10T17:12:01.002309Z",
     "shell.execute_reply": "2024-09-10T17:12:01.001297Z"
    },
    "papermill": {
     "duration": 0.040876,
     "end_time": "2024-09-10T17:12:01.004509",
     "exception": false,
     "start_time": "2024-09-10T17:12:00.963633",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Top recommendations for 17018:\n",
      "[['DOORMAT UNION FLAG'], ['DOORMAT HEARTS'], ['DOOR MAT TOPIARY'], ['DOOR MAT RED SPOT'], ['DOOR MAT 3 SMILEY CATS'], ['DOORMAT RED RETROSPOT'], ['DOORMAT FAIRY CAKE', 'DOORMAT UNION FLAG'], ['SET OF 6 SPICE TINS PANTRY DESIGN'], ['DOOR MAT ENGLISH ROSE '], ['DOORMAT NEW ENGLAND']]\n",
      "\n",
      "Top recommendations for 17018:\n",
      "[['DOORMAT UNION FLAG'], ['DOORMAT HEARTS'], ['DOOR MAT TOPIARY'], ['DOOR MAT RED SPOT'], ['DOOR MAT 3 SMILEY CATS'], ['DOORMAT RED RETROSPOT'], ['DOORMAT FAIRY CAKE', 'DOORMAT UNION FLAG'], ['SET OF 6 SPICE TINS PANTRY DESIGN'], ['DOOR MAT ENGLISH ROSE '], ['DOORMAT NEW ENGLAND']]\n"
     ]
    }
   ],
   "source": [
    "for customer in top_customers:\n",
    "    print(f\"\\nTop recommendations for {17018}:\")\n",
    "    if customer in customer_recommendations:\n",
    "        print(customer_recommendations[17018])\n",
    "    else:\n",
    "        print(\"No recommendations available.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "fcf21bb3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T17:12:01.070073Z",
     "iopub.status.busy": "2024-09-10T17:12:01.069337Z",
     "iopub.status.idle": "2024-09-10T17:12:01.078522Z",
     "shell.execute_reply": "2024-09-10T17:12:01.077529Z"
    },
    "papermill": {
     "duration": 0.044359,
     "end_time": "2024-09-10T17:12:01.081056",
     "exception": false,
     "start_time": "2024-09-10T17:12:01.036697",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Items recommended to 17018 that were actually bought:\n",
      "{'DOORMAT HEARTS'}\n",
      "\n",
      "Items recommended to 17018 that were actually bought:\n",
      "{'DOORMAT HEARTS'}\n"
     ]
    }
   ],
   "source": [
    "# Check if the recommended items were actually bought in the testing period\n",
    "for customer in top_customers:\n",
    "    recommended_items = set([item for sublist in customer_recommendations.get(customer, []) for item in sublist])\n",
    "    actually_bought = set(test_df_common[test_df_common['Customer ID'] == 17018]['Description'].unique())\n",
    "    intersection = recommended_items.intersection(actually_bought)\n",
    "    \n",
    "    print(f\"\\nItems recommended to {17018} that were actually bought:\")\n",
    "    print(intersection if intersection else \"None of the recommended items were purchased.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dcf4f738",
   "metadata": {
    "papermill": {
     "duration": 0.031644,
     "end_time": "2024-09-10T17:12:01.144992",
     "exception": false,
     "start_time": "2024-09-10T17:12:01.113348",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5675815,
     "sourceId": 9361056,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 148.667869,
   "end_time": "2024-09-10T17:12:02.198784",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-10T17:09:33.530915",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
